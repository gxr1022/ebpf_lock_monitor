                 U pthread_mutexattr_destroy
                 U pthread_mutexattr_init
                 U pthread_mutexattr_settype
                 U pthread_mutex_destroy
                 U pthread_mutex_init
                 U pthread_mutex_lock
                 U pthread_mutex_trylock
                 U pthread_mutex_unlock
0000000007ee5010 u guard variable for mongo::ScopedRangeDeleterLock::_mutex
00000000082c12a8 b guard variable for (anonymous namespace)::get_locale_mutex()::locale_mutex
00000000082bfc80 b guard variable for (anonymous namespace)::get_locale_cache_mutex()::locale_cache_mutex
00000000082c1710 b guard variable for __gnu_internal::get_mutex(unsigned char)::m
0000000007ffe6a8 b guard variable for absl::lts_20211102::time_internal::cctz::(anonymous namespace)::TimeZoneMutex()::time_zone_mutex
0000000007ffc240 b guard variable for boost::log::v2s_mt_posix::aux::lazy_singleton<boost::log::v2s_mt_posix::sinks::(anonymous namespace)::native_syslog_initializer, boost::mutex>::get_instance()::instance
0000000007fda330 b guard variable for mongo::(anonymous namespace)::runnerMutex()::mutex
0000000007fd7028 b guard variable for mongo::(anonymous namespace)::SSLThreadInfo::mutexes()::m
0000000007cf6130 t __gnu_internal::get_mutex(unsigned char)
0000000007ee42a0 d absl::lts_20211102::(anonymous namespace)::mutex_tracer
00000000076b8a40 T asio::detail::posix_mutex::posix_mutex()
00000000076b8a40 T asio::detail::posix_mutex::posix_mutex()
00000000076aca40 T asio::detail::scheduler::do_run_one(asio::detail::conditionally_enabled_mutex::scoped_lock&, asio::detail::scheduler_thread_info&, std::error_code const&)
00000000076bb6d0 t asio::detail::scheduler::do_run_one(asio::detail::conditionally_enabled_mutex::scoped_lock&, asio::detail::scheduler_thread_info&, std::error_code const&) [clone .cold]
00000000076ad630 T asio::detail::scheduler::do_poll_one(asio::detail::conditionally_enabled_mutex::scoped_lock&, asio::detail::scheduler_thread_info&, std::error_code const&)
00000000076bb720 t asio::detail::scheduler::do_poll_one(asio::detail::conditionally_enabled_mutex::scoped_lock&, asio::detail::scheduler_thread_info&, std::error_code const&) [clone .cold]
00000000076acf40 T asio::detail::scheduler::do_wait_one(asio::detail::conditionally_enabled_mutex::scoped_lock&, asio::detail::scheduler_thread_info&, long, std::error_code const&)
00000000076bb6f8 t asio::detail::scheduler::do_wait_one(asio::detail::conditionally_enabled_mutex::scoped_lock&, asio::detail::scheduler_thread_info&, long, std::error_code const&) [clone .cold]
00000000076ab2e0 T asio::detail::scheduler::stop_all_threads(asio::detail::conditionally_enabled_mutex::scoped_lock&)
00000000076ab380 T asio::detail::scheduler::wake_one_thread_and_unlock(asio::detail::conditionally_enabled_mutex::scoped_lock&)
0000000007bc0df0 W boost::lock_guard<boost::mutex>::~lock_guard()
0000000007bc0df0 W boost::lock_guard<boost::mutex>::~lock_guard()
0000000007c06410 W boost::unique_lock<boost::mutex>::lock()
0000000007c061e0 W boost::unique_lock<boost::mutex>::unlock()
0000000007c04560 W boost::unique_lock<boost::mutex>::~unique_lock()
0000000007c04560 W boost::unique_lock<boost::mutex>::~unique_lock()
0000000007ffc3a0 b boost::thread_detail::once_mutex
00000000046f0c12 t boost::optional_detail::optional_base<std::unique_lock<std::mutex> >::destroy() [clone .part.0]
0000000007c066c0 W boost::condition_variable::wait(boost::unique_lock<boost::mutex>&)
0000000007c00f70 T boost::notify_all_at_thread_exit(boost::condition_variable&, boost::unique_lock<boost::mutex>)
0000000007ab0960 W boost::log::v2s_mt_posix::aux::locking_ptr<mongo::logv2::FileRotateSink, std::mutex>::locking_ptr(boost::shared_ptr<mongo::logv2::FileRotateSink> const&, std::mutex&)
0000000007ab0960 W boost::log::v2s_mt_posix::aux::locking_ptr<mongo::logv2::FileRotateSink, std::mutex>::locking_ptr(boost::shared_ptr<mongo::logv2::FileRotateSink> const&, std::mutex&)
0000000007ab09c0 W boost::log::v2s_mt_posix::aux::locking_ptr<mongo::logv2::FileRotateSink, std::mutex>::~locking_ptr()
0000000007ab09c0 W boost::log::v2s_mt_posix::aux::locking_ptr<mongo::logv2::FileRotateSink, std::mutex>::~locking_ptr()
0000000007ab0660 W boost::log::v2s_mt_posix::aux::locking_ptr<boost::log::v2s_mt_posix::sinks::syslog_backend, std::mutex>::~locking_ptr()
0000000007ab0660 W boost::log::v2s_mt_posix::aux::locking_ptr<boost::log::v2s_mt_posix::sinks::syslog_backend, std::mutex>::~locking_ptr()
0000000007ab0430 W boost::log::v2s_mt_posix::aux::locking_ptr<boost::log::v2s_mt_posix::sinks::basic_text_ostream_backend<char>, std::mutex>::~locking_ptr()
0000000007ab0430 W boost::log::v2s_mt_posix::aux::locking_ptr<boost::log::v2s_mt_posix::sinks::basic_text_ostream_backend<char>, std::mutex>::~locking_ptr()
0000000007bfd46c W void boost::log::v2s_mt_posix::aux::adaptive_mutex::throw_exception<boost::lock_error>(int, char const*, char const*, char const*, int)
0000000007bfd244 W void boost::log::v2s_mt_posix::aux::adaptive_mutex::throw_exception<boost::thread_resource_error>(int, char const*, char const*, char const*, int)
0000000007bb5470 W boost::log::v2s_mt_posix::aux::shared_lock_guard<boost::log::v2s_mt_posix::aux::light_rw_mutex>::~shared_lock_guard()
0000000007bb5470 W boost::log::v2s_mt_posix::aux::shared_lock_guard<boost::log::v2s_mt_posix::aux::light_rw_mutex>::~shared_lock_guard()
0000000007ab5be0 W void boost::log::v2s_mt_posix::sinks::basic_formatting_sink_frontend<char>::feed_record<boost::log::v2s_mt_posix::aux::fake_mutex, mongo::logv2::CompositeBackend<boost::log::v2s_mt_posix::sinks::syslog_backend, mongo::logv2::RamLogSink, mongo::logv2::RamLogSink, mongo::logv2::UserAssertSink> >(boost::log::v2s_mt_posix::record_view const&, boost::log::v2s_mt_posix::aux::fake_mutex&, mongo::logv2::CompositeBackend<boost::log::v2s_mt_posix::sinks::syslog_backend, mongo::logv2::RamLogSink, mongo::logv2::RamLogSink, mongo::logv2::UserAssertSink>&)
0000000007ab6000 W void boost::log::v2s_mt_posix::sinks::basic_formatting_sink_frontend<char>::feed_record<boost::log::v2s_mt_posix::aux::fake_mutex, mongo::logv2::CompositeBackend<boost::log::v2s_mt_posix::sinks::basic_text_ostream_backend<char>, mongo::logv2::RamLogSink, mongo::logv2::RamLogSink, mongo::logv2::UserAssertSink> >(boost::log::v2s_mt_posix::record_view const&, boost::log::v2s_mt_posix::aux::fake_mutex&, mongo::logv2::CompositeBackend<boost::log::v2s_mt_posix::sinks::basic_text_ostream_backend<char>, mongo::logv2::RamLogSink, mongo::logv2::RamLogSink, mongo::logv2::UserAssertSink>&)
0000000007ab6420 W void boost::log::v2s_mt_posix::sinks::basic_formatting_sink_frontend<char>::feed_record<boost::log::v2s_mt_posix::aux::fake_mutex, mongo::logv2::CompositeBackend<mongo::logv2::FileRotateSink> >(boost::log::v2s_mt_posix::record_view const&, boost::log::v2s_mt_posix::aux::fake_mutex&, mongo::logv2::CompositeBackend<mongo::logv2::FileRotateSink>&)
0000000007ab57c0 W void boost::log::v2s_mt_posix::sinks::basic_formatting_sink_frontend<char>::feed_record<boost::log::v2s_mt_posix::aux::fake_mutex, mongo::logv2::CompositeBackend<mongo::logv2::FileRotateSink, mongo::logv2::RamLogSink, mongo::logv2::RamLogSink, mongo::logv2::UserAssertSink> >(boost::log::v2s_mt_posix::record_view const&, boost::log::v2s_mt_posix::aux::fake_mutex&, mongo::logv2::CompositeBackend<mongo::logv2::FileRotateSink, mongo::logv2::RamLogSink, mongo::logv2::RamLogSink, mongo::logv2::UserAssertSink>&)
0000000007bfe5b0 W boost::log::v2s_mt_posix::sources::basic_logger<char, boost::log::v2s_mt_posix::sources::severity_logger_mt<boost::log::v2s_mt_posix::trivial::severity_level>, boost::log::v2s_mt_posix::sources::multi_thread_model<boost::log::v2s_mt_posix::aux::light_rw_mutex> >::~basic_logger()
0000000007bfe5b0 W boost::log::v2s_mt_posix::sources::basic_logger<char, boost::log::v2s_mt_posix::sources::severity_logger_mt<boost::log::v2s_mt_posix::trivial::severity_level>, boost::log::v2s_mt_posix::sources::multi_thread_model<boost::log::v2s_mt_posix::aux::light_rw_mutex> >::~basic_logger()
0000000007bfdf60 W boost::log::v2s_mt_posix::sources::basic_severity_logger<boost::log::v2s_mt_posix::sources::basic_logger<char, boost::log::v2s_mt_posix::sources::severity_logger_mt<boost::log::v2s_mt_posix::trivial::severity_level>, boost::log::v2s_mt_posix::sources::multi_thread_model<boost::log::v2s_mt_posix::aux::light_rw_mutex> >, boost::log::v2s_mt_posix::trivial::severity_level>::~basic_severity_logger()
0000000007bfdf60 W boost::log::v2s_mt_posix::sources::basic_severity_logger<boost::log::v2s_mt_posix::sources::basic_logger<char, boost::log::v2s_mt_posix::sources::severity_logger_mt<boost::log::v2s_mt_posix::trivial::severity_level>, boost::log::v2s_mt_posix::sources::multi_thread_model<boost::log::v2s_mt_posix::aux::light_rw_mutex> >, boost::log::v2s_mt_posix::trivial::severity_level>::~basic_severity_logger()
0000000007beba30 W boost::asio::detail::scheduler::do_run_one(boost::asio::detail::conditionally_enabled_mutex::scoped_lock&, boost::asio::detail::scheduler_thread_info&, boost::system::error_code const&)
0000000007c062c0 W boost::mutex::lock()
0000000007be6c50 W boost::mutex::~mutex()
0000000007be6c50 W boost::mutex::~mutex()
0000000007c06170 W boost::detail::thread_data_base::notify_all_at_thread_exit(boost::condition_variable*, boost::mutex*)
0000000007c03830 W boost::detail::externally_launched_thread::notify_all_at_thread_exit(boost::condition_variable*, boost::mutex*)
00000000077d2990 T mongo::ThreadPool::Impl::_doOneTask(std::unique_lock<std::mutex>*)
00000000077d6e82 t mongo::ThreadPool::Impl::_doOneTask(std::unique_lock<std::mutex>*) [clone .cold]
00000000077d3300 T mongo::ThreadPool::Impl::_join_inlock(std::unique_lock<std::mutex>*)
00000000077d6f0a t mongo::ThreadPool::Impl::_join_inlock(std::unique_lock<std::mutex>*) [clone .cold]
0000000006eee360 T mongo::PoolForHost::waitForFreeConnection(int, std::unique_lock<std::mutex>&)
0000000006ef4d46 t mongo::PoolForHost::waitForFreeConnection(int, std::unique_lock<std::mutex>&) [clone .cold]
0000000004d3f2b4 t mongo::(anonymous namespace)::FSyncCommand::releaseLock_inLock(std::unique_lock<std::mutex>&) [clone .part.0]
00000000046efcc0 t mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime) [clone .constprop.0]
00000000046f1d6a t mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime) [clone .constprop.0] [clone .cold]
00000000078a0f00 t mongo::(anonymous namespace)::SubBaton::_runJobs(std::unique_lock<std::mutex>, mongo::Status)
00000000078a1796 t mongo::(anonymous namespace)::SubBaton::_runJobs(std::unique_lock<std::mutex>, mongo::Status) [clone .cold]
0000000004bf3db0 W bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Interruptible::sleepUntil(mongo::Date_t)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Interruptible::sleepUntil(mongo::Date_t)::{lambda()#1})
0000000003a73420 W bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Interruptible::sleepFor(mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Interruptible::sleepFor(mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})
0000000004cb9aa0 W bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ValidateCmd::run(mongo::OperationContext*, mongo::DatabaseName const&, mongo::BSONObj const&, mongo::BSONObjBuilder&)::{lambda()#12}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ValidateCmd::run(mongo::OperationContext*, mongo::DatabaseName const&, mongo::BSONObj const&, mongo::BSONObjBuilder&)::{lambda()#12})
000000000763d910 W bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Notification<bool>::waitFor(mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Notification<bool>::waitFor(mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})
00000000061c73d0 T mongo::SessionKiller::_periodicKill(mongo::OperationContext*, std::unique_lock<std::mutex>&)
00000000061c9b14 t mongo::SessionKiller::_periodicKill(mongo::OperationContext*, std::unique_lock<std::mutex>&) [clone .cold]
00000000046ef870 t auto mongo::future_details::throwingCall<mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&, mongo::StatusWith<mongo::future_details::FakeVoid> >(mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&, mongo::StatusWith<mongo::future_details::FakeVoid>&&)
00000000046ef870 t auto mongo::future_details::throwingCall<mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}, mongo::StatusWith<mongo::future_details::FakeVoid> >(mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&, mongo::StatusWith<mongo::future_details::FakeVoid>&&)
00000000046f1b0a t auto mongo::future_details::throwingCall<mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}, mongo::StatusWith<mongo::future_details::FakeVoid> >(mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&, mongo::StatusWith<mongo::future_details::FakeVoid>&&) [clone .cold]
0000000003e110e0 W void mongo::DecorationRegistry<mongo::ServiceContext>::constructAt<std::mutex>(void*)
000000000534cc80 W std::vector<std::unique_lock<std::mutex>, std::allocator<std::unique_lock<std::mutex> > > mongo::partitioned_detail::lockAllPartitions<std::vector<mongo::Aligned<std::mutex, 64ul, 64ul, 64ul>, boost::alignment::aligned_allocator<mongo::Aligned<std::mutex, 64ul, 64ul, 64ul>, 1ul> > >(std::vector<mongo::Aligned<std::mutex, 64ul, 64ul, 64ul>, boost::alignment::aligned_allocator<mongo::Aligned<std::mutex, 64ul, 64ul, 64ul>, 1ul> >&)
0000000007ec2cd0 u mongo::BasicLockableAdapter::forT<std::unique_lock<std::mutex> >
00000000061b51c0 T mongo::ClusterCursorManager::detachAndKillCursor(std::unique_lock<std::mutex>, mongo::OperationContext*, long long)
00000000061b8c7a t mongo::ClusterCursorManager::detachAndKillCursor(std::unique_lock<std::mutex>, mongo::OperationContext*, long long) [clone .cold]
0000000003a8b300 T mongo::AlarmSchedulerPrecise::_clearAllAlarmsImpl(std::unique_lock<std::mutex>&)
0000000003a8c0b4 t mongo::AlarmSchedulerPrecise::_clearAllAlarmsImpl(std::unique_lock<std::mutex>&) [clone .cold]
0000000007ee5100 u mongo::ScopedRangeDeleterLock::_mutex
000000000421cc90 T mongo::MigrationChunkClonerSource::_drainAllOutstandingOperationTrackRequests(std::unique_lock<std::mutex>&)
0000000004226c7c t mongo::MigrationChunkClonerSource::_drainAllOutstandingOperationTrackRequests(std::unique_lock<std::mutex>&) [clone .cold]
00000000044d2ea0 T mongo::TransactionCoordinatorCatalog::_waitForStepUpToComplete(std::unique_lock<std::mutex>&, mongo::OperationContext*)
00000000044d616a t mongo::TransactionCoordinatorCatalog::_waitForStepUpToComplete(std::unique_lock<std::mutex>&, mongo::OperationContext*) [clone .cold]
0000000003d35540 W auto mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::unique_function<void (mongo::Status)>, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_popRunner<mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::unique_function<void (mongo::Status)>, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::tryPop()::{lambda(std::unique_lock<std::mutex>&)#1}>(mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::unique_function<void (mongo::Status)>, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::tryPop()::{lambda(std::unique_lock<std::mutex>&)#1}&&)
0000000003d35e50 W auto mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::unique_function<void (mongo::Status)>, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_pushRunner<mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::unique_function<void (mongo::Status)>, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::push(mongo::unique_function<void (mongo::Status)>&&, mongo::Interruptible*)::{lambda(std::unique_lock<std::mutex>&)#1}>(mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::unique_function<void (mongo::Status)>, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::push(mongo::unique_function<void (mongo::Status)>&&, mongo::Interruptible*)::{lambda(std::unique_lock<std::mutex>&)#1}&&)
00000000057e8b10 W auto mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::AsyncRequestsSender::Response, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_popRunner<mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::AsyncRequestsSender::Response, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::pop(mongo::Interruptible*)::{lambda(std::unique_lock<std::mutex>&)#1}>(mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::AsyncRequestsSender::Response, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::pop(mongo::Interruptible*)::{lambda(std::unique_lock<std::mutex>&)#1}&&)
00000000057e9170 W auto mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::AsyncRequestsSender::Response, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_pushRunner<mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::AsyncRequestsSender::Response, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::push(mongo::AsyncRequestsSender::Response&&, mongo::Interruptible*)::{lambda(std::unique_lock<std::mutex>&)#1}>(mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::AsyncRequestsSender::Response, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::push(mongo::AsyncRequestsSender::Response&&, mongo::Interruptible*)::{lambda(std::unique_lock<std::mutex>&)#1}&&)
00000000057e8670 W mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::AsyncRequestsSender::Response, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)
00000000048d25e0 W auto mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::repl::TenantFileImporterService::ImporterEvent, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_popRunner<mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::repl::TenantFileImporterService::ImporterEvent, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::pop(mongo::Interruptible*)::{lambda(std::unique_lock<std::mutex>&)#1}>(mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::repl::TenantFileImporterService::ImporterEvent, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::pop(mongo::Interruptible*)::{lambda(std::unique_lock<std::mutex>&)#1}&&)
00000000048d1740 W auto mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::repl::TenantFileImporterService::ImporterEvent, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_pushRunner<mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::repl::TenantFileImporterService::ImporterEvent, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::tryPush(mongo::repl::TenantFileImporterService::ImporterEvent&&)::{lambda(std::unique_lock<std::mutex>&)#1}>(mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::repl::TenantFileImporterService::ImporterEvent, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::tryPush(mongo::repl::TenantFileImporterService::ImporterEvent&&)::{lambda(std::unique_lock<std::mutex>&)#1}&&)
000000000424fb00 W auto mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::BSONObj, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_popRunner<mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::BSONObj, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::pop(mongo::Interruptible*)::{lambda(std::unique_lock<std::mutex>&)#1}>(mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::BSONObj, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::pop(mongo::Interruptible*)::{lambda(std::unique_lock<std::mutex>&)#1}&&)
0000000004250710 W auto mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::BSONObj, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_pushRunner<mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::BSONObj, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::push(mongo::BSONObj&&, mongo::Interruptible*)::{lambda(std::unique_lock<std::mutex>&)#1}>(mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::BSONObj, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::push(mongo::BSONObj&&, mongo::Interruptible*)::{lambda(std::unique_lock<std::mutex>&)#1}&&)
00000000052255f0 T mongo::TenantMigrationDonorAccessBlocker::_onMajorityCommitAbortOpTime(std::unique_lock<std::mutex>&)
0000000005227114 t mongo::TenantMigrationDonorAccessBlocker::_onMajorityCommitAbortOpTime(std::unique_lock<std::mutex>&) [clone .cold]
00000000052253d0 T mongo::TenantMigrationDonorAccessBlocker::_onMajorityCommitCommitOpTime(std::unique_lock<std::mutex>&)
0000000005227074 t mongo::TenantMigrationDonorAccessBlocker::_onMajorityCommitCommitOpTime(std::unique_lock<std::mutex>&) [clone .cold]
000000000485baf0 T mongo::repl::InitialSyncer::_scheduleRollbackCheckerCheckForRollback_inlock(std::lock_guard<std::mutex> const&, std::shared_ptr<mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> > >)
000000000486d1f0 t mongo::repl::InitialSyncer::_scheduleRollbackCheckerCheckForRollback_inlock(std::lock_guard<std::mutex> const&, std::shared_ptr<mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> > >) [clone .cold]
000000000485f820 T mongo::repl::InitialSyncer::_checkApplierProgressAndScheduleGetNextApplierBatch_inlock(std::lock_guard<std::mutex> const&, std::shared_ptr<mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> > >)
000000000486dada t mongo::repl::InitialSyncer::_checkApplierProgressAndScheduleGetNextApplierBatch_inlock(std::lock_guard<std::mutex> const&, std::shared_ptr<mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> > >) [clone .cold]
0000000004858c90 t mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> >::setResultAndCancelRemainingWork_inlock(std::unique_lock<std::mutex> const&, mongo::StatusWith<mongo::repl::OpTimeAndWallTime> const&) [clone .isra.0]
000000000486cd12 t mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> >::setResultAndCancelRemainingWork_inlock(std::unique_lock<std::mutex> const&, mongo::StatusWith<mongo::repl::OpTimeAndWallTime> const&) [clone .isra.0] [clone .cold]
0000000003c21e60 T mongo::repl::ReplicationCoordinatorImpl::_reportUpstream_inlock(std::unique_lock<std::mutex>)
0000000003c4e45c t mongo::repl::ReplicationCoordinatorImpl::_reportUpstream_inlock(std::unique_lock<std::mutex>) [clone .cold]
0000000003c6a2b0 T mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)
0000000003c71ede t mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>) [clone .cold]
0000000003b848a0 T mongo::repl::ReplicationCoordinatorExternalStateImpl::_stopDataReplication_inlock(mongo::OperationContext*, std::unique_lock<std::mutex>&)
0000000003b8979e t mongo::repl::ReplicationCoordinatorExternalStateImpl::_stopDataReplication_inlock(mongo::OperationContext*, std::unique_lock<std::mutex>&) [clone .cold]
0000000006f42d60 T mongo::executor::ThreadPoolTaskExecutor::signalEvent_inlock(mongo::executor::TaskExecutor::EventHandle const&, std::unique_lock<std::mutex>)
0000000006f48166 t mongo::executor::ThreadPoolTaskExecutor::signalEvent_inlock(mongo::executor::TaskExecutor::EventHandle const&, std::unique_lock<std::mutex>) [clone .cold]
0000000006f427f0 T mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)
0000000006f48082 t mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>) [clone .cold]
0000000006f42f00 T mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)
0000000006f481d2 t mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>) [clone .cold]
0000000006f42cd0 T mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::unique_lock<std::mutex>)
0000000006f48148 t mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::unique_lock<std::mutex>) [clone .cold]
0000000006f444f0 T mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)
0000000006f4847a t mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>) [clone .cold]
0000000006f432a0 T mongo::executor::ThreadPoolTaskExecutor::_join(std::unique_lock<std::mutex>)
0000000006f48278 t mongo::executor::ThreadPoolTaskExecutor::_join(std::unique_lock<std::mutex>) [clone .cold]
0000000006f4aae0 T mongo::executor::NetworkInterfaceThreadPool::_consumeTasks(std::unique_lock<std::mutex>)
0000000006f4b3a4 t mongo::executor::NetworkInterfaceThreadPool::_consumeTasks(std::unique_lock<std::mutex>) [clone .cold]
0000000006f4a810 T mongo::executor::NetworkInterfaceThreadPool::_consumeTasksInline(std::unique_lock<std::mutex>)
0000000006f4b38c t mongo::executor::NetworkInterfaceThreadPool::_consumeTasksInline(std::unique_lock<std::mutex>) [clone .cold]
0000000003d03820 W mongo::WithLock::WithLock<std::mutex>(std::unique_lock<std::mutex> const&)
0000000003d03820 W mongo::WithLock::WithLock<std::mutex>(std::unique_lock<std::mutex> const&)
0000000003e15c10 W mongo::Decorable<mongo::ServiceContext>::Decoration<std::mutex> mongo::Decorable<mongo::ServiceContext>::declareDecoration<std::mutex>()
0000000006f8b8b0 T mongo::transport::AsioNetworkingBaton::_safeExecute(std::unique_lock<std::mutex>, mongo::unique_function<void (std::unique_lock<std::mutex>)>)
0000000006f8ec54 t mongo::transport::AsioNetworkingBaton::_safeExecute(std::unique_lock<std::mutex>, mongo::unique_function<void (std::unique_lock<std::mutex>)>) [clone .cold]
0000000006f8cae0 T mongo::transport::AsioNetworkingBaton::_poll[abi:cxx11](std::unique_lock<std::mutex>&, mongo::ClockSource*)
0000000006f8f15e t mongo::transport::AsioNetworkingBaton::_poll[abi:cxx11](std::unique_lock<std::mutex>&, mongo::ClockSource*) [clone .cold]
00000000071688b0 T mongo::transport::ServiceExecutorFixed::_waitForStop(std::unique_lock<std::mutex>&, boost::optional<mongo::Duration<std::ratio<1l, 1000l> > >)
000000000716b916 t mongo::transport::ServiceExecutorFixed::_waitForStop(std::unique_lock<std::mutex>&, boost::optional<mongo::Duration<std::ratio<1l, 1000l> > >) [clone .cold]
0000000007fc3c60 b mongo::mutex
00000000066d19b0 T mozilla::detail::MutexImpl::mutexTryLock()
0000000006f8e642 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::operator()(std::unique_lock<std::mutex>) const [clone .part.0]
0000000006f8f850 W std::unique_ptr<mongo::unique_function<void (std::unique_lock<std::mutex>)>::Impl, std::default_delete<mongo::unique_function<void (std::unique_lock<std::mutex>)>::Impl> >::~unique_ptr()
0000000006f8f850 W std::unique_ptr<mongo::unique_function<void (std::unique_lock<std::mutex>)>::Impl, std::default_delete<mongo::unique_function<void (std::unique_lock<std::mutex>)>::Impl> >::~unique_ptr()
0000000003c58d70 W std::unique_lock<std::mutex>::lock()
0000000003a6f390 W std::unique_lock<std::mutex>::unlock()
0000000007c7fdf0 T std::__basic_file<char>::__basic_file(pthread_mutex_t*)
0000000007c7fdf0 T std::__basic_file<char>::__basic_file(pthread_mutex_t*)
0000000006fa6d90 W std::recursive_mutex::lock()
000000000485b220 t std::_Function_handler<void (mongo::StatusWith<bool> const&), mongo::repl::InitialSyncer::_scheduleRollbackCheckerCheckForRollback_inlock(std::lock_guard<std::mutex> const&, std::shared_ptr<mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> > >)::{lambda(mongo::StatusWith<bool> const&)#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000004863070 t std::_Function_handler<void (mongo::StatusWith<bool> const&), mongo::repl::InitialSyncer::_scheduleRollbackCheckerCheckForRollback_inlock(std::lock_guard<std::mutex> const&, std::shared_ptr<mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> > >)::{lambda(mongo::StatusWith<bool> const&)#1}>::_M_invoke(std::_Any_data const&, mongo::StatusWith<bool> const&)
000000000486e7f3 t std::_Function_handler<void (mongo::StatusWith<bool> const&), mongo::repl::InitialSyncer::_scheduleRollbackCheckerCheckForRollback_inlock(std::lock_guard<std::mutex> const&, std::shared_ptr<mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> > >)::{lambda(mongo::StatusWith<bool> const&)#1}>::_M_invoke(std::_Any_data const&, mongo::StatusWith<bool> const&) [clone .cold]
0000000007c8fe60 T std::condition_variable::wait(std::unique_lock<std::mutex>&)
0000000003a6af40 W std::_Sp_counted_ptr_inplace<std::mutex, std::allocator<std::mutex>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
0000000003a67420 W std::_Sp_counted_ptr_inplace<std::mutex, std::allocator<std::mutex>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
0000000003a6b650 W std::_Sp_counted_ptr_inplace<std::mutex, std::allocator<std::mutex>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
0000000003a674e0 W std::_Sp_counted_ptr_inplace<std::mutex, std::allocator<std::mutex>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
0000000003a67410 W std::_Sp_counted_ptr_inplace<std::mutex, std::allocator<std::mutex>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
0000000003a67410 W std::_Sp_counted_ptr_inplace<std::mutex, std::allocator<std::mutex>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
000000000562d530 W std::cv_status std::_V2::condition_variable_any::wait_until<std::unique_lock<std::mutex>, std::chrono::_V2::steady_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::unique_lock<std::mutex>&, std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&)
0000000003c973c0 W std::cv_status std::_V2::condition_variable_any::wait_until<std::unique_lock<std::mutex>, std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::unique_lock<std::mutex>&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&)
0000000003c58fe0 W void std::_V2::condition_variable_any::wait<std::unique_lock<std::mutex> >(std::unique_lock<std::mutex>&)
0000000003bac330 W std::_V2::condition_variable_any::_Unlock<std::unique_lock<std::mutex> >::~_Unlock()
0000000003bac330 W std::_V2::condition_variable_any::_Unlock<std::unique_lock<std::mutex> >::~_Unlock()
0000000003bab0a0 W std::mutex::lock()
0000000006f90400 W void std::vector<mongo::unique_function<void (std::unique_lock<std::mutex>)>, std::allocator<mongo::unique_function<void (std::unique_lock<std::mutex>)> > >::_M_realloc_insert<mongo::unique_function<void (std::unique_lock<std::mutex>)> >(__gnu_cxx::__normal_iterator<mongo::unique_function<void (std::unique_lock<std::mutex>)>*, std::vector<mongo::unique_function<void (std::unique_lock<std::mutex>)>, std::allocator<mongo::unique_function<void (std::unique_lock<std::mutex>)> > > >, mongo::unique_function<void (std::unique_lock<std::mutex>)>&&)
00000000076be8a0 W void std::vector<std::unique_ptr<std::recursive_mutex, std::default_delete<std::recursive_mutex> >, std::allocator<std::unique_ptr<std::recursive_mutex, std::default_delete<std::recursive_mutex> > > >::_M_realloc_insert<std::unique_ptr<std::recursive_mutex, std::default_delete<std::recursive_mutex> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<std::recursive_mutex, std::default_delete<std::recursive_mutex> >*, std::vector<std::unique_ptr<std::recursive_mutex, std::default_delete<std::recursive_mutex> >, std::allocator<std::unique_ptr<std::recursive_mutex, std::default_delete<std::recursive_mutex> > > > >, std::unique_ptr<std::recursive_mutex, std::default_delete<std::recursive_mutex> >&&)
0000000004c9d150 W void std::vector<std::unique_lock<std::mutex>, std::allocator<std::unique_lock<std::mutex> > >::_M_realloc_insert<std::unique_lock<std::mutex> >(__gnu_cxx::__normal_iterator<std::unique_lock<std::mutex>*, std::vector<std::unique_lock<std::mutex>, std::allocator<std::unique_lock<std::mutex> > > >, std::unique_lock<std::mutex>&&)
0000000005349d50 W std::vector<std::unique_lock<std::mutex>, std::allocator<std::unique_lock<std::mutex> > >::~vector()
0000000005349d50 W std::vector<std::unique_lock<std::mutex>, std::allocator<std::unique_lock<std::mutex> > >::~vector()
0000000007c05ff0 W void std::vector<std::pair<boost::condition_variable*, boost::mutex*>, std::allocator<std::pair<boost::condition_variable*, boost::mutex*> > >::_M_realloc_insert<std::pair<boost::condition_variable*, boost::mutex*> >(__gnu_cxx::__normal_iterator<std::pair<boost::condition_variable*, boost::mutex*>*, std::vector<std::pair<boost::condition_variable*, boost::mutex*>, std::allocator<std::pair<boost::condition_variable*, boost::mutex*> > > >, std::pair<boost::condition_variable*, boost::mutex*>&&)
0000000007c8ff30 T std::notify_all_at_thread_exit(std::condition_variable&, std::unique_lock<std::mutex>)
0000000007c8ff19 t std::notify_all_at_thread_exit(std::condition_variable&, std::unique_lock<std::mutex>) [clone .cold]
000000000780cc30 W void std::lock<std::mutex, std::mutex>(std::mutex&, std::mutex&)
0000000007eb6580 V typeinfo for boost::log::v2s_mt_posix::sources::basic_logger<char, boost::log::v2s_mt_posix::sources::severity_logger_mt<boost::log::v2s_mt_posix::trivial::severity_level>, boost::log::v2s_mt_posix::sources::multi_thread_model<boost::log::v2s_mt_posix::aux::light_rw_mutex> >
0000000007eb6570 V typeinfo for boost::log::v2s_mt_posix::sources::multi_thread_model<boost::log::v2s_mt_posix::aux::light_rw_mutex>
0000000007eb6598 V typeinfo for boost::log::v2s_mt_posix::sources::basic_severity_logger<boost::log::v2s_mt_posix::sources::basic_logger<char, boost::log::v2s_mt_posix::sources::severity_logger_mt<boost::log::v2s_mt_posix::trivial::severity_level>, boost::log::v2s_mt_posix::sources::multi_thread_model<boost::log::v2s_mt_posix::aux::light_rw_mutex> >, boost::log::v2s_mt_posix::trivial::severity_level>
0000000007eb65b0 V typeinfo for boost::log::v2s_mt_posix::sources::basic_composite_logger<char, boost::log::v2s_mt_posix::sources::severity_logger_mt<boost::log::v2s_mt_posix::trivial::severity_level>, boost::log::v2s_mt_posix::sources::multi_thread_model<boost::log::v2s_mt_posix::aux::light_rw_mutex>, boost::log::v2s_mt_posix::sources::features<boost::log::v2s_mt_posix::sources::severity<boost::log::v2s_mt_posix::trivial::severity_level> > >
0000000007e6a8c8 V typeinfo for mongo::unique_function<void (std::unique_lock<std::mutex>)>::Impl
0000000007d2b4b0 V typeinfo for std::_Sp_counted_ptr_inplace<std::mutex, std::allocator<std::mutex>, (__gnu_cxx::_Lock_policy)2>
0000000007e683a8 d typeinfo for mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}&&)::SpecificImpl
0000000007e683c0 d typeinfo for mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(auto:1)#3}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(auto:1)#3}&&)::SpecificImpl
0000000007e68450 d typeinfo for mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}>(mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}&&)::SpecificImpl
0000000007e68468 d typeinfo for mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(auto:1)#2}>(mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(auto:1)#2}&&)::SpecificImpl
0000000007e68990 d typeinfo for mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::NetworkInterfaceThreadPool::_consumeTasks(std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}>(mongo::executor::NetworkInterfaceThreadPool::_consumeTasks(std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}&&)::SpecificImpl
0000000007e68390 d typeinfo for mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}::operator()(mongo::Status) const::{lambda(auto:1)#1}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}::operator()(mongo::Status) const::{lambda(auto:1)#1}&&)::SpecificImpl
0000000007e68438 d typeinfo for mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}::operator()(mongo::Status) const::{lambda(auto:1)#1}>(mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}::operator()(mongo::Status) const::{lambda(auto:1)#1}&&)::SpecificImpl
0000000007d7b5f8 d typeinfo for mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::onCompletion<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::onCompletion<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl
0000000007d836e0 d typeinfo for mongo::unique_function<void (mongo::executor::TaskExecutor::CallbackArgs const&)>::makeImpl<mongo::repl::InitialSyncer::_checkApplierProgressAndScheduleGetNextApplierBatch_inlock(std::lock_guard<std::mutex> const&, std::shared_ptr<mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> > >)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#3}>(mongo::repl::InitialSyncer::_checkApplierProgressAndScheduleGetNextApplierBatch_inlock(std::lock_guard<std::mutex> const&, std::shared_ptr<mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> > >)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#3}&&)::SpecificImpl
0000000007d35100 d typeinfo for mongo::unique_function<void (mongo::executor::TaskExecutor::CallbackArgs const&)>::makeImpl<mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#4}>(mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#4}&&)::SpecificImpl
0000000007d35118 d typeinfo for mongo::unique_function<void (mongo::executor::TaskExecutor::CallbackArgs const&)>::makeImpl<mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#6}>(mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#6}&&)::SpecificImpl
0000000007e6a868 d typeinfo for mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::_addSession(mongo::transport::Session&, short)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::_addSession(mongo::transport::Session&, short)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl
0000000007e6a838 d typeinfo for mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::_cancelTimer(unsigned long)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::_cancelTimer(unsigned long)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl
0000000007e6a820 d typeinfo for mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::cancelSession(mongo::transport::Session&)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::cancelSession(mongo::transport::Session&)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl
0000000007e6a7d8 d typeinfo for mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl
0000000007e6a808 d typeinfo for mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::waitUntil(mongo::Date_t, mongo::CancellationToken const&)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::waitUntil(mongo::Date_t, mongo::CancellationToken const&)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl
0000000007e6a7f0 d typeinfo for mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::waitUntil(mongo::transport::ReactorTimer const&, mongo::Date_t)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::waitUntil(mongo::transport::ReactorTimer const&, mongo::Date_t)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl
0000000007e6a850 d typeinfo for mongo::unique_function<void ()>::makeImpl<mongo::transport::AsioNetworkingBaton::_poll(std::unique_lock<std::mutex>&, mongo::ClockSource*)::{lambda()#1}>(mongo::transport::AsioNetworkingBaton::_poll(std::unique_lock<std::mutex>&, mongo::ClockSource*)::{lambda()#1}&&)::SpecificImpl
0000000007d837a0 d typeinfo for mongo::repl::InitialSyncer::_scheduleRollbackCheckerCheckForRollback_inlock(std::lock_guard<std::mutex> const&, std::shared_ptr<mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> > >)::{lambda(mongo::StatusWith<bool> const&)#1}
0000000002ea4560 V typeinfo name for boost::log::v2s_mt_posix::sources::basic_logger<char, boost::log::v2s_mt_posix::sources::severity_logger_mt<boost::log::v2s_mt_posix::trivial::severity_level>, boost::log::v2s_mt_posix::sources::multi_thread_model<boost::log::v2s_mt_posix::aux::light_rw_mutex> >
0000000002ea4500 V typeinfo name for boost::log::v2s_mt_posix::sources::multi_thread_model<boost::log::v2s_mt_posix::aux::light_rw_mutex>
0000000002ea4600 V typeinfo name for boost::log::v2s_mt_posix::sources::basic_severity_logger<boost::log::v2s_mt_posix::sources::basic_logger<char, boost::log::v2s_mt_posix::sources::severity_logger_mt<boost::log::v2s_mt_posix::trivial::severity_level>, boost::log::v2s_mt_posix::sources::multi_thread_model<boost::log::v2s_mt_posix::aux::light_rw_mutex> >, boost::log::v2s_mt_posix::trivial::severity_level>
0000000002ea46e0 V typeinfo name for boost::log::v2s_mt_posix::sources::basic_composite_logger<char, boost::log::v2s_mt_posix::sources::severity_logger_mt<boost::log::v2s_mt_posix::trivial::severity_level>, boost::log::v2s_mt_posix::sources::multi_thread_model<boost::log::v2s_mt_posix::aux::light_rw_mutex>, boost::log::v2s_mt_posix::sources::features<boost::log::v2s_mt_posix::sources::severity<boost::log::v2s_mt_posix::trivial::severity_level> > >
000000000277cd20 V typeinfo name for mongo::unique_function<void (std::unique_lock<std::mutex>)>::Impl
0000000002521c20 V typeinfo name for std::_Sp_counted_ptr_inplace<std::mutex, std::allocator<std::mutex>, (__gnu_cxx::_Lock_policy)2>
00000000027738c0 r typeinfo name for mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}&&)::SpecificImpl
00000000027739e0 r typeinfo name for mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(auto:1)#3}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(auto:1)#3}&&)::SpecificImpl
0000000002774200 r typeinfo name for mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}>(mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}&&)::SpecificImpl
00000000027742e0 r typeinfo name for mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(auto:1)#2}>(mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(auto:1)#2}&&)::SpecificImpl
00000000027747e0 r typeinfo name for mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::NetworkInterfaceThreadPool::_consumeTasks(std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}>(mongo::executor::NetworkInterfaceThreadPool::_consumeTasks(std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}&&)::SpecificImpl
00000000027737a0 r typeinfo name for mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}::operator()(mongo::Status) const::{lambda(auto:1)#1}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}::operator()(mongo::Status) const::{lambda(auto:1)#1}&&)::SpecificImpl
0000000002774100 r typeinfo name for mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}::operator()(mongo::Status) const::{lambda(auto:1)#1}>(mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}::operator()(mongo::Status) const::{lambda(auto:1)#1}&&)::SpecificImpl
00000000025cd540 r typeinfo name for mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::onCompletion<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::onCompletion<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl
00000000025f3b20 r typeinfo name for mongo::unique_function<void (mongo::executor::TaskExecutor::CallbackArgs const&)>::makeImpl<mongo::repl::InitialSyncer::_checkApplierProgressAndScheduleGetNextApplierBatch_inlock(std::lock_guard<std::mutex> const&, std::shared_ptr<mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> > >)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#3}>(mongo::repl::InitialSyncer::_checkApplierProgressAndScheduleGetNextApplierBatch_inlock(std::lock_guard<std::mutex> const&, std::shared_ptr<mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> > >)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#3}&&)::SpecificImpl
000000000253b800 r typeinfo name for mongo::unique_function<void (mongo::executor::TaskExecutor::CallbackArgs const&)>::makeImpl<mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#4}>(mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#4}&&)::SpecificImpl
000000000253b940 r typeinfo name for mongo::unique_function<void (mongo::executor::TaskExecutor::CallbackArgs const&)>::makeImpl<mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#6}>(mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#6}&&)::SpecificImpl
000000000277c880 r typeinfo name for mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::_addSession(mongo::transport::Session&, short)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::_addSession(mongo::transport::Session&, short)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl
000000000277c740 r typeinfo name for mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::_cancelTimer(unsigned long)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::_cancelTimer(unsigned long)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl
000000000277c680 r typeinfo name for mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::cancelSession(mongo::transport::Session&)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::cancelSession(mongo::transport::Session&)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl
000000000277c440 r typeinfo name for mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl
000000000277c5c0 r typeinfo name for mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::waitUntil(mongo::Date_t, mongo::CancellationToken const&)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::waitUntil(mongo::Date_t, mongo::CancellationToken const&)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl
000000000277c500 r typeinfo name for mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::waitUntil(mongo::transport::ReactorTimer const&, mongo::Date_t)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::waitUntil(mongo::transport::ReactorTimer const&, mongo::Date_t)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl
000000000277c7e0 r typeinfo name for mongo::unique_function<void ()>::makeImpl<mongo::transport::AsioNetworkingBaton::_poll(std::unique_lock<std::mutex>&, mongo::ClockSource*)::{lambda()#1}>(mongo::transport::AsioNetworkingBaton::_poll(std::unique_lock<std::mutex>&, mongo::ClockSource*)::{lambda()#1}&&)::SpecificImpl
00000000025f47e0 r typeinfo name for mongo::repl::InitialSyncer::_scheduleRollbackCheckerCheckForRollback_inlock(std::lock_guard<std::mutex> const&, std::shared_ptr<mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> > >)::{lambda(mongo::StatusWith<bool> const&)#1}
0000000007d2b930 V vtable for std::_Sp_counted_ptr_inplace<std::mutex, std::allocator<std::mutex>, (__gnu_cxx::_Lock_policy)2>
0000000007e68708 d vtable for mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}&&)::SpecificImpl
0000000007e68730 d vtable for mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(auto:1)#3}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(auto:1)#3}&&)::SpecificImpl
0000000007e68820 d vtable for mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}>(mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}&&)::SpecificImpl
0000000007e68848 d vtable for mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(auto:1)#2}>(mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(auto:1)#2}&&)::SpecificImpl
0000000007e689e8 d vtable for mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::NetworkInterfaceThreadPool::_consumeTasks(std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}>(mongo::executor::NetworkInterfaceThreadPool::_consumeTasks(std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}&&)::SpecificImpl
0000000007e686e0 d vtable for mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}::operator()(mongo::Status) const::{lambda(auto:1)#1}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}::operator()(mongo::Status) const::{lambda(auto:1)#1}&&)::SpecificImpl
0000000007e687f8 d vtable for mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}::operator()(mongo::Status) const::{lambda(auto:1)#1}>(mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}::operator()(mongo::Status) const::{lambda(auto:1)#1}&&)::SpecificImpl
0000000007d7b890 d vtable for mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::onCompletion<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::onCompletion<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl
0000000007d83a50 d vtable for mongo::unique_function<void (mongo::executor::TaskExecutor::CallbackArgs const&)>::makeImpl<mongo::repl::InitialSyncer::_checkApplierProgressAndScheduleGetNextApplierBatch_inlock(std::lock_guard<std::mutex> const&, std::shared_ptr<mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> > >)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#3}>(mongo::repl::InitialSyncer::_checkApplierProgressAndScheduleGetNextApplierBatch_inlock(std::lock_guard<std::mutex> const&, std::shared_ptr<mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> > >)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#3}&&)::SpecificImpl
0000000007d35258 d vtable for mongo::unique_function<void (mongo::executor::TaskExecutor::CallbackArgs const&)>::makeImpl<mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#4}>(mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#4}&&)::SpecificImpl
0000000007d35280 d vtable for mongo::unique_function<void (mongo::executor::TaskExecutor::CallbackArgs const&)>::makeImpl<mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#6}>(mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#6}&&)::SpecificImpl
0000000007e6aa90 d vtable for mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::_addSession(mongo::transport::Session&, short)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::_addSession(mongo::transport::Session&, short)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl
0000000007e6aa40 d vtable for mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::_cancelTimer(unsigned long)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::_cancelTimer(unsigned long)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl
0000000007e6aa18 d vtable for mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::cancelSession(mongo::transport::Session&)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::cancelSession(mongo::transport::Session&)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl
0000000007e6a9a0 d vtable for mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl
0000000007e6a9f0 d vtable for mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::waitUntil(mongo::Date_t, mongo::CancellationToken const&)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::waitUntil(mongo::Date_t, mongo::CancellationToken const&)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl
0000000007e6a9c8 d vtable for mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::waitUntil(mongo::transport::ReactorTimer const&, mongo::Date_t)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::waitUntil(mongo::transport::ReactorTimer const&, mongo::Date_t)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl
0000000007e6aa68 d vtable for mongo::unique_function<void ()>::makeImpl<mongo::transport::AsioNetworkingBaton::_poll(std::unique_lock<std::mutex>&, mongo::ClockSource*)::{lambda()#1}>(mongo::transport::AsioNetworkingBaton::_poll(std::unique_lock<std::mutex>&, mongo::ClockSource*)::{lambda()#1}&&)::SpecificImpl
00000000082c12c0 b (anonymous namespace)::get_locale_mutex()::locale_mutex
00000000082bfca0 b (anonymous namespace)::get_locale_cache_mutex()::locale_cache_mutex
00000000082c1740 b __gnu_internal::get_mutex(unsigned char)::m
0000000007ffe6b0 b absl::lts_20211102::time_internal::cctz::(anonymous namespace)::TimeZoneMutex()::time_zone_mutex
0000000007ffc260 b boost::log::v2s_mt_posix::aux::lazy_singleton<boost::log::v2s_mt_posix::sinks::(anonymous namespace)::native_syslog_initializer, boost::mutex>::get_instance()::instance
0000000007ffc2b0 b boost::log::v2s_mt_posix::aux::lazy_singleton<boost::log::v2s_mt_posix::sinks::(anonymous namespace)::native_syslog_initializer, boost::mutex>::get()::_boost_log_once_block_flag_43
0000000007fda340 b mongo::(anonymous namespace)::runnerMutex()::mutex
0000000007fd7030 b mongo::(anonymous namespace)::SSLThreadInfo::mutexes()::m
000000000632bf80 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::CappedInsertNotifier::waitUntil(mongo::OperationContext*, unsigned long, mongo::Date_t) const::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::CappedInsertNotifier::waitUntil(mongo::OperationContext*, unsigned long, mongo::Date_t) const::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
000000000632d6ea t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::CappedInsertNotifier::waitUntil(mongo::OperationContext*, unsigned long, mongo::Date_t) const::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::CappedInsertNotifier::waitUntil(mongo::OperationContext*, unsigned long, mongo::Date_t) const::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
000000000632c110 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::CappedInsertNotifier::waitUntil(mongo::OperationContext*, unsigned long, mongo::Date_t) const::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::CappedInsertNotifier::waitUntil(mongo::OperationContext*, unsigned long, mongo::Date_t) const::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
000000000632d736 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::CappedInsertNotifier::waitUntil(mongo::OperationContext*, unsigned long, mongo::Date_t) const::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::CappedInsertNotifier::waitUntil(mongo::OperationContext*, unsigned long, mongo::Date_t) const::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004090f70 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ShardingDDLCoordinatorService::waitForRecoveryCompletion(mongo::OperationContext*) const::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ShardingDDLCoordinatorService::waitForRecoveryCompletion(mongo::OperationContext*) const::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000004098ad4 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ShardingDDLCoordinatorService::waitForRecoveryCompletion(mongo::OperationContext*) const::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ShardingDDLCoordinatorService::waitForRecoveryCompletion(mongo::OperationContext*) const::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004091180 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ShardingDDLCoordinatorService::waitForRecoveryCompletion(mongo::OperationContext*) const::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ShardingDDLCoordinatorService::waitForRecoveryCompletion(mongo::OperationContext*) const::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000004098b20 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ShardingDDLCoordinatorService::waitForRecoveryCompletion(mongo::OperationContext*) const::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ShardingDDLCoordinatorService::waitForRecoveryCompletion(mongo::OperationContext*) const::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004090ea0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ShardingDDLCoordinatorService::waitForCoordinatorsOfGivenTypeToComplete(mongo::OperationContext*, mongo::DDLCoordinatorTypeEnum) const::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ShardingDDLCoordinatorService::waitForCoordinatorsOfGivenTypeToComplete(mongo::OperationContext*, mongo::DDLCoordinatorTypeEnum) const::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000004098a88 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ShardingDDLCoordinatorService::waitForCoordinatorsOfGivenTypeToComplete(mongo::OperationContext*, mongo::DDLCoordinatorTypeEnum) const::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ShardingDDLCoordinatorService::waitForCoordinatorsOfGivenTypeToComplete(mongo::OperationContext*, mongo::DDLCoordinatorTypeEnum) const::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
00000000040912b0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ShardingDDLCoordinatorService::waitForCoordinatorsOfGivenTypeToComplete(mongo::OperationContext*, mongo::DDLCoordinatorTypeEnum) const::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ShardingDDLCoordinatorService::waitForCoordinatorsOfGivenTypeToComplete(mongo::OperationContext*, mongo::DDLCoordinatorTypeEnum) const::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000004098b6c t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ShardingDDLCoordinatorService::waitForCoordinatorsOfGivenTypeToComplete(mongo::OperationContext*, mongo::DDLCoordinatorTypeEnum) const::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ShardingDDLCoordinatorService::waitForCoordinatorsOfGivenTypeToComplete(mongo::OperationContext*, mongo::DDLCoordinatorTypeEnum) const::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004bf3860 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Interruptible::sleepUntil(mongo::Date_t)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Interruptible::sleepUntil(mongo::Date_t)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000004bf39f0 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Interruptible::sleepUntil(mongo::Date_t)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Interruptible::sleepUntil(mongo::Date_t)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000003a72fc0 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Interruptible::sleepFor(mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Interruptible::sleepFor(mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000003a73190 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Interruptible::sleepFor(mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Interruptible::sleepFor(mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000004cb9570 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ValidateCmd::run(mongo::OperationContext*, mongo::DatabaseName const&, mongo::BSONObj const&, mongo::BSONObjBuilder&)::{lambda()#12}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ValidateCmd::run(mongo::OperationContext*, mongo::DatabaseName const&, mongo::BSONObj const&, mongo::BSONObjBuilder&)::{lambda()#12})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000004cb9730 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ValidateCmd::run(mongo::OperationContext*, mongo::DatabaseName const&, mongo::BSONObj const&, mongo::BSONObjBuilder&)::{lambda()#12}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ValidateCmd::run(mongo::OperationContext*, mongo::DatabaseName const&, mongo::BSONObj const&, mongo::BSONObjBuilder&)::{lambda()#12})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000003cf29d0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::(anonymous namespace)::handleWaitForUserCacheInvalidation(mongo::OperationContext*, mongo::ReadThroughCache<mongo::UserRequest, mongo::User, mongo::CacheNotCausallyConsistent>::ValueHandle const&)::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::(anonymous namespace)::handleWaitForUserCacheInvalidation(mongo::OperationContext*, mongo::ReadThroughCache<mongo::UserRequest, mongo::User, mongo::CacheNotCausallyConsistent>::ValueHandle const&)::{lambda()#2})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000003cfcca2 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::(anonymous namespace)::handleWaitForUserCacheInvalidation(mongo::OperationContext*, mongo::ReadThroughCache<mongo::UserRequest, mongo::User, mongo::CacheNotCausallyConsistent>::ValueHandle const&)::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::(anonymous namespace)::handleWaitForUserCacheInvalidation(mongo::OperationContext*, mongo::ReadThroughCache<mongo::UserRequest, mongo::User, mongo::CacheNotCausallyConsistent>::ValueHandle const&)::{lambda()#2})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000003cf2b00 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::(anonymous namespace)::handleWaitForUserCacheInvalidation(mongo::OperationContext*, mongo::ReadThroughCache<mongo::UserRequest, mongo::User, mongo::CacheNotCausallyConsistent>::ValueHandle const&)::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::(anonymous namespace)::handleWaitForUserCacheInvalidation(mongo::OperationContext*, mongo::ReadThroughCache<mongo::UserRequest, mongo::User, mongo::CacheNotCausallyConsistent>::ValueHandle const&)::{lambda()#2})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000003cfccee t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::(anonymous namespace)::handleWaitForUserCacheInvalidation(mongo::OperationContext*, mongo::ReadThroughCache<mongo::UserRequest, mongo::User, mongo::CacheNotCausallyConsistent>::ValueHandle const&)::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::(anonymous namespace)::handleWaitForUserCacheInvalidation(mongo::OperationContext*, mongo::ReadThroughCache<mongo::UserRequest, mongo::User, mongo::CacheNotCausallyConsistent>::ValueHandle const&)::{lambda()#2})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000003cf2d80 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::(anonymous namespace)::handleWaitForUserCacheInvalidation(mongo::OperationContext*, mongo::ReadThroughCache<mongo::UserRequest, mongo::User, mongo::CacheNotCausallyConsistent>::ValueHandle const&)::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::(anonymous namespace)::handleWaitForUserCacheInvalidation(mongo::OperationContext*, mongo::ReadThroughCache<mongo::UserRequest, mongo::User, mongo::CacheNotCausallyConsistent>::ValueHandle const&)::{lambda()#2})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#4}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000003cfcd62 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::(anonymous namespace)::handleWaitForUserCacheInvalidation(mongo::OperationContext*, mongo::ReadThroughCache<mongo::UserRequest, mongo::User, mongo::CacheNotCausallyConsistent>::ValueHandle const&)::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::(anonymous namespace)::handleWaitForUserCacheInvalidation(mongo::OperationContext*, mongo::ReadThroughCache<mongo::UserRequest, mongo::User, mongo::CacheNotCausallyConsistent>::ValueHandle const&)::{lambda()#2})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#4}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004001290 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Notification<bool>::get(mongo::OperationContext*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Notification<bool>::get(mongo::OperationContext*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000004001460 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Notification<bool>::get(mongo::OperationContext*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Notification<bool>::get(mongo::OperationContext*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
000000000763d3d0 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Notification<bool>::waitFor(mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Notification<bool>::waitFor(mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
000000000763d5a0 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Notification<bool>::waitFor(mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Notification<bool>::waitFor(mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000003cab110 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Notification<mongo::Status>::get(mongo::OperationContext*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Notification<mongo::Status>::get(mongo::OperationContext*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000003cab2a0 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Notification<mongo::Status>::get(mongo::OperationContext*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Notification<mongo::Status>::get(mongo::OperationContext*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
00000000061c4f60 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::SessionKiller::kill(mongo::OperationContext*, absl::lts_20211102::node_hash_set<mongo::KillAllSessionsByPatternItem, mongo::HashImprover<mongo::KillAllSessionsByPatternItemHash, mongo::KillAllSessionsByPatternItem>, std::equal_to<mongo::KillAllSessionsByPatternItem>, std::allocator<mongo::KillAllSessionsByPatternItem> > const&)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::SessionKiller::kill(mongo::OperationContext*, absl::lts_20211102::node_hash_set<mongo::KillAllSessionsByPatternItem, mongo::HashImprover<mongo::KillAllSessionsByPatternItemHash, mongo::KillAllSessionsByPatternItem>, std::equal_to<mongo::KillAllSessionsByPatternItem>, std::allocator<mongo::KillAllSessionsByPatternItem> > const&)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
00000000061c96ce t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::SessionKiller::kill(mongo::OperationContext*, absl::lts_20211102::node_hash_set<mongo::KillAllSessionsByPatternItem, mongo::HashImprover<mongo::KillAllSessionsByPatternItemHash, mongo::KillAllSessionsByPatternItem>, std::equal_to<mongo::KillAllSessionsByPatternItem>, std::allocator<mongo::KillAllSessionsByPatternItem> > const&)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::SessionKiller::kill(mongo::OperationContext*, absl::lts_20211102::node_hash_set<mongo::KillAllSessionsByPatternItem, mongo::HashImprover<mongo::KillAllSessionsByPatternItemHash, mongo::KillAllSessionsByPatternItem>, std::equal_to<mongo::KillAllSessionsByPatternItem>, std::allocator<mongo::KillAllSessionsByPatternItem> > const&)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
00000000061c50f0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::SessionKiller::kill(mongo::OperationContext*, absl::lts_20211102::node_hash_set<mongo::KillAllSessionsByPatternItem, mongo::HashImprover<mongo::KillAllSessionsByPatternItemHash, mongo::KillAllSessionsByPatternItem>, std::equal_to<mongo::KillAllSessionsByPatternItem>, std::allocator<mongo::KillAllSessionsByPatternItem> > const&)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::SessionKiller::kill(mongo::OperationContext*, absl::lts_20211102::node_hash_set<mongo::KillAllSessionsByPatternItem, mongo::HashImprover<mongo::KillAllSessionsByPatternItemHash, mongo::KillAllSessionsByPatternItem>, std::equal_to<mongo::KillAllSessionsByPatternItem>, std::allocator<mongo::KillAllSessionsByPatternItem> > const&)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
00000000061c971a t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::SessionKiller::kill(mongo::OperationContext*, absl::lts_20211102::node_hash_set<mongo::KillAllSessionsByPatternItem, mongo::HashImprover<mongo::KillAllSessionsByPatternItemHash, mongo::KillAllSessionsByPatternItem>, std::equal_to<mongo::KillAllSessionsByPatternItem>, std::allocator<mongo::KillAllSessionsByPatternItem> > const&)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::SessionKiller::kill(mongo::OperationContext*, absl::lts_20211102::node_hash_set<mongo::KillAllSessionsByPatternItem, mongo::HashImprover<mongo::KillAllSessionsByPatternItemHash, mongo::KillAllSessionsByPatternItem>, std::equal_to<mongo::KillAllSessionsByPatternItem>, std::allocator<mongo::KillAllSessionsByPatternItem> > const&)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004670ae0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::DDLLockManager::lock(mongo::OperationContext*, mongo::StringData, mongo::StringData, mongo::Duration<std::ratio<1l, 1000l> >, bool)::{lambda()#5}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::DDLLockManager::lock(mongo::OperationContext*, mongo::StringData, mongo::StringData, mongo::Duration<std::ratio<1l, 1000l> >, bool)::{lambda()#5})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
000000000467316a t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::DDLLockManager::lock(mongo::OperationContext*, mongo::StringData, mongo::StringData, mongo::Duration<std::ratio<1l, 1000l> >, bool)::{lambda()#5}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::DDLLockManager::lock(mongo::OperationContext*, mongo::StringData, mongo::StringData, mongo::Duration<std::ratio<1l, 1000l> >, bool)::{lambda()#5})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004670fa0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::DDLLockManager::lock(mongo::OperationContext*, mongo::StringData, mongo::StringData, mongo::Duration<std::ratio<1l, 1000l> >, bool)::{lambda()#5}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::DDLLockManager::lock(mongo::OperationContext*, mongo::StringData, mongo::StringData, mongo::Duration<std::ratio<1l, 1000l> >, bool)::{lambda()#5})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000004673202 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::DDLLockManager::lock(mongo::OperationContext*, mongo::StringData, mongo::StringData, mongo::Duration<std::ratio<1l, 1000l> >, bool)::{lambda()#5}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::DDLLockManager::lock(mongo::OperationContext*, mongo::StringData, mongo::StringData, mongo::Duration<std::ratio<1l, 1000l> >, bool)::{lambda()#5})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004670950 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::DDLLockManager::lock(mongo::OperationContext*, mongo::StringData, mongo::StringData, mongo::Duration<std::ratio<1l, 1000l> >, bool)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::DDLLockManager::lock(mongo::OperationContext*, mongo::StringData, mongo::StringData, mongo::Duration<std::ratio<1l, 1000l> >, bool)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
000000000467311e t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::DDLLockManager::lock(mongo::OperationContext*, mongo::StringData, mongo::StringData, mongo::Duration<std::ratio<1l, 1000l> >, bool)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::DDLLockManager::lock(mongo::OperationContext*, mongo::StringData, mongo::StringData, mongo::Duration<std::ratio<1l, 1000l> >, bool)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004670c70 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::DDLLockManager::lock(mongo::OperationContext*, mongo::StringData, mongo::StringData, mongo::Duration<std::ratio<1l, 1000l> >, bool)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::DDLLockManager::lock(mongo::OperationContext*, mongo::StringData, mongo::StringData, mongo::Duration<std::ratio<1l, 1000l> >, bool)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
00000000046731b6 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::DDLLockManager::lock(mongo::OperationContext*, mongo::StringData, mongo::StringData, mongo::Duration<std::ratio<1l, 1000l> >, bool)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::DDLLockManager::lock(mongo::OperationContext*, mongo::StringData, mongo::StringData, mongo::Duration<std::ratio<1l, 1000l> >, bool)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000003a89770 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000003a89930 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
00000000057c1200 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::SessionCatalog::_checkOutSessionInner(mongo::OperationContext*, mongo::LogicalSessionId const&, boost::optional<mongo::SessionCatalog::KillToken>)::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::SessionCatalog::_checkOutSessionInner(mongo::OperationContext*, mongo::LogicalSessionId const&, boost::optional<mongo::SessionCatalog::KillToken>)::{lambda()#2})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
00000000057c7644 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::SessionCatalog::_checkOutSessionInner(mongo::OperationContext*, mongo::LogicalSessionId const&, boost::optional<mongo::SessionCatalog::KillToken>)::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::SessionCatalog::_checkOutSessionInner(mongo::OperationContext*, mongo::LogicalSessionId const&, boost::optional<mongo::SessionCatalog::KillToken>)::{lambda()#2})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
00000000057c1ba0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::SessionCatalog::_checkOutSessionInner(mongo::OperationContext*, mongo::LogicalSessionId const&, boost::optional<mongo::SessionCatalog::KillToken>)::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::SessionCatalog::_checkOutSessionInner(mongo::OperationContext*, mongo::LogicalSessionId const&, boost::optional<mongo::SessionCatalog::KillToken>)::{lambda()#2})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
00000000057c771c t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::SessionCatalog::_checkOutSessionInner(mongo::OperationContext*, mongo::LogicalSessionId const&, boost::optional<mongo::SessionCatalog::KillToken>)::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::SessionCatalog::_checkOutSessionInner(mongo::OperationContext*, mongo::LogicalSessionId const&, boost::optional<mongo::SessionCatalog::KillToken>)::{lambda()#2})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
00000000057c1fb0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::SessionCatalog::_checkOutSessionInner(mongo::OperationContext*, mongo::LogicalSessionId const&, boost::optional<mongo::SessionCatalog::KillToken>)::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::SessionCatalog::_checkOutSessionInner(mongo::OperationContext*, mongo::LogicalSessionId const&, boost::optional<mongo::SessionCatalog::KillToken>)::{lambda()#2})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#4}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
00000000057c7780 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::SessionCatalog::_checkOutSessionInner(mongo::OperationContext*, mongo::LogicalSessionId const&, boost::optional<mongo::SessionCatalog::KillToken>)::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::SessionCatalog::_checkOutSessionInner(mongo::OperationContext*, mongo::LogicalSessionId const&, boost::optional<mongo::SessionCatalog::KillToken>)::{lambda()#2})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#4}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
00000000051eca00 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveIndexBuilds::waitUntilAnIndexBuildFinishes(mongo::OperationContext*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveIndexBuilds::waitUntilAnIndexBuildFinishes(mongo::OperationContext*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
00000000051f116a t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveIndexBuilds::waitUntilAnIndexBuildFinishes(mongo::OperationContext*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveIndexBuilds::waitUntilAnIndexBuildFinishes(mongo::OperationContext*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
00000000051ecd00 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveIndexBuilds::waitUntilAnIndexBuildFinishes(mongo::OperationContext*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveIndexBuilds::waitUntilAnIndexBuildFinishes(mongo::OperationContext*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
00000000051f1202 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveIndexBuilds::waitUntilAnIndexBuildFinishes(mongo::OperationContext*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveIndexBuilds::waitUntilAnIndexBuildFinishes(mongo::OperationContext*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
00000000051ecb80 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveIndexBuilds::awaitNoIndexBuildInProgressForCollection(mongo::OperationContext*, mongo::UUID const&, mongo::IndexBuildProtocol)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveIndexBuilds::awaitNoIndexBuildInProgressForCollection(mongo::OperationContext*, mongo::UUID const&, mongo::IndexBuildProtocol)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
00000000051f11b6 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveIndexBuilds::awaitNoIndexBuildInProgressForCollection(mongo::OperationContext*, mongo::UUID const&, mongo::IndexBuildProtocol)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveIndexBuilds::awaitNoIndexBuildInProgressForCollection(mongo::OperationContext*, mongo::UUID const&, mongo::IndexBuildProtocol)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
00000000051ee630 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveIndexBuilds::awaitNoIndexBuildInProgressForCollection(mongo::OperationContext*, mongo::UUID const&, mongo::IndexBuildProtocol)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveIndexBuilds::awaitNoIndexBuildInProgressForCollection(mongo::OperationContext*, mongo::UUID const&, mongo::IndexBuildProtocol)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
00000000051f1604 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveIndexBuilds::awaitNoIndexBuildInProgressForCollection(mongo::OperationContext*, mongo::UUID const&, mongo::IndexBuildProtocol)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveIndexBuilds::awaitNoIndexBuildInProgressForCollection(mongo::OperationContext*, mongo::UUID const&, mongo::IndexBuildProtocol)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
00000000042a27a0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::RangeDeleterService::ReadyRangeDeletionsProcessor::_runRangeDeletions()::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::RangeDeleterService::ReadyRangeDeletionsProcessor::_runRangeDeletions()::{lambda()#2})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
00000000042ab484 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::RangeDeleterService::ReadyRangeDeletionsProcessor::_runRangeDeletions()::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::RangeDeleterService::ReadyRangeDeletionsProcessor::_runRangeDeletions()::{lambda()#2})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
00000000042a2870 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::RangeDeleterService::ReadyRangeDeletionsProcessor::_runRangeDeletions()::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::RangeDeleterService::ReadyRangeDeletionsProcessor::_runRangeDeletions()::{lambda()#2})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
00000000042ab4d0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::RangeDeleterService::ReadyRangeDeletionsProcessor::_runRangeDeletions()::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::RangeDeleterService::ReadyRangeDeletionsProcessor::_runRangeDeletions()::{lambda()#2})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000007636da0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::KeysCollectionManager::PeriodicRunner::_doPeriodicRefresh(mongo::ServiceContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#4}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::KeysCollectionManager::PeriodicRunner::_doPeriodicRefresh(mongo::ServiceContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#4})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
000000000763c272 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::KeysCollectionManager::PeriodicRunner::_doPeriodicRefresh(mongo::ServiceContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#4}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::KeysCollectionManager::PeriodicRunner::_doPeriodicRefresh(mongo::ServiceContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#4})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000007636f30 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::KeysCollectionManager::PeriodicRunner::_doPeriodicRefresh(mongo::ServiceContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#4}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::KeysCollectionManager::PeriodicRunner::_doPeriodicRefresh(mongo::ServiceContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#4})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
000000000763c2be t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::KeysCollectionManager::PeriodicRunner::_doPeriodicRefresh(mongo::ServiceContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#4}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::KeysCollectionManager::PeriodicRunner::_doPeriodicRefresh(mongo::ServiceContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#4})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004211730 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::MigrationBatchFetcher<mongo::MigrationBatchInserter>::BufferSizeTracker::waitUntilSpaceAvailableAndAdd(mongo::OperationContext*, int)::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::MigrationBatchFetcher<mongo::MigrationBatchInserter>::BufferSizeTracker::waitUntilSpaceAvailableAndAdd(mongo::OperationContext*, int)::{lambda()#2})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000004211840 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::MigrationBatchFetcher<mongo::MigrationBatchInserter>::BufferSizeTracker::waitUntilSpaceAvailableAndAdd(mongo::OperationContext*, int)::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::MigrationBatchFetcher<mongo::MigrationBatchInserter>::BufferSizeTracker::waitUntilSpaceAvailableAndAdd(mongo::OperationContext*, int)::{lambda()#2})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000004211d90 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::MigrationBatchFetcher<mongo::MigrationBatchMockInserter>::BufferSizeTracker::waitUntilSpaceAvailableAndAdd(mongo::OperationContext*, int)::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::MigrationBatchFetcher<mongo::MigrationBatchMockInserter>::BufferSizeTracker::waitUntilSpaceAvailableAndAdd(mongo::OperationContext*, int)::{lambda()#2})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000004211ea0 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::MigrationBatchFetcher<mongo::MigrationBatchMockInserter>::BufferSizeTracker::waitUntilSpaceAvailableAndAdd(mongo::OperationContext*, int)::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::MigrationBatchFetcher<mongo::MigrationBatchMockInserter>::BufferSizeTracker::waitUntilSpaceAvailableAndAdd(mongo::OperationContext*, int)::{lambda()#2})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000003b00630 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::WatchdogPeriodicThread::doLoop()::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::WatchdogPeriodicThread::doLoop()::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000003b03e2e t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::WatchdogPeriodicThread::doLoop()::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::WatchdogPeriodicThread::doLoop()::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000003b01690 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::WatchdogPeriodicThread::doLoop()::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::WatchdogPeriodicThread::doLoop()::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000003b03fe0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::WatchdogPeriodicThread::doLoop()::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::WatchdogPeriodicThread::doLoop()::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
000000000492b820 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::WiredTigerOplogManager::waitForAllEarlierOplogWritesToBeVisible(mongo::WiredTigerRecordStore const*, mongo::OperationContext*)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::WiredTigerOplogManager::waitForAllEarlierOplogWritesToBeVisible(mongo::WiredTigerRecordStore const*, mongo::OperationContext*)::{lambda()#3})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
000000000492ddd6 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::WiredTigerOplogManager::waitForAllEarlierOplogWritesToBeVisible(mongo::WiredTigerRecordStore const*, mongo::OperationContext*)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::WiredTigerOplogManager::waitForAllEarlierOplogWritesToBeVisible(mongo::WiredTigerRecordStore const*, mongo::OperationContext*)::{lambda()#3})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
000000000492c680 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::WiredTigerOplogManager::waitForAllEarlierOplogWritesToBeVisible(mongo::WiredTigerRecordStore const*, mongo::OperationContext*)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::WiredTigerOplogManager::waitForAllEarlierOplogWritesToBeVisible(mongo::WiredTigerRecordStore const*, mongo::OperationContext*)::{lambda()#3})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
000000000492e07a t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::WiredTigerOplogManager::waitForAllEarlierOplogWritesToBeVisible(mongo::WiredTigerRecordStore const*, mongo::OperationContext*)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::WiredTigerOplogManager::waitForAllEarlierOplogWritesToBeVisible(mongo::WiredTigerRecordStore const*, mongo::OperationContext*)::{lambda()#3})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004954e20 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::WiredTigerSessionCache::waitUntilPreparedUnitOfWorkCommitsOrAborts(mongo::OperationContext*, unsigned long)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::WiredTigerSessionCache::waitUntilPreparedUnitOfWorkCommitsOrAborts(mongo::OperationContext*, unsigned long)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000004957a4e t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::WiredTigerSessionCache::waitUntilPreparedUnitOfWorkCommitsOrAborts(mongo::OperationContext*, unsigned long)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::WiredTigerSessionCache::waitUntilPreparedUnitOfWorkCommitsOrAborts(mongo::OperationContext*, unsigned long)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004954fb0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::WiredTigerSessionCache::waitUntilPreparedUnitOfWorkCommitsOrAborts(mongo::OperationContext*, unsigned long)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::WiredTigerSessionCache::waitUntilPreparedUnitOfWorkCommitsOrAborts(mongo::OperationContext*, unsigned long)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000004957a9a t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::WiredTigerSessionCache::waitUntilPreparedUnitOfWorkCommitsOrAborts(mongo::OperationContext*, unsigned long)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::WiredTigerSessionCache::waitUntilPreparedUnitOfWorkCommitsOrAborts(mongo::OperationContext*, unsigned long)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
00000000071b00f0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::FlowControlTicketholder::getTicket(mongo::OperationContext*, mongo::FlowControlTicketholder::CurOp*)::{lambda()#4}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::FlowControlTicketholder::getTicket(mongo::OperationContext*, mongo::FlowControlTicketholder::CurOp*)::{lambda()#4})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
00000000071b1c78 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::FlowControlTicketholder::getTicket(mongo::OperationContext*, mongo::FlowControlTicketholder::CurOp*)::{lambda()#4}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::FlowControlTicketholder::getTicket(mongo::OperationContext*, mongo::FlowControlTicketholder::CurOp*)::{lambda()#4})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
00000000071b0280 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::FlowControlTicketholder::getTicket(mongo::OperationContext*, mongo::FlowControlTicketholder::CurOp*)::{lambda()#4}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::FlowControlTicketholder::getTicket(mongo::OperationContext*, mongo::FlowControlTicketholder::CurOp*)::{lambda()#4})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
00000000071b1cc4 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::FlowControlTicketholder::getTicket(mongo::OperationContext*, mongo::FlowControlTicketholder::CurOp*)::{lambda()#4}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::FlowControlTicketholder::getTicket(mongo::OperationContext*, mongo::FlowControlTicketholder::CurOp*)::{lambda()#4})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004178670 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::registerDonateChunk(mongo::OperationContext*, mongo::ShardsvrMoveRange const&)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::registerDonateChunk(mongo::OperationContext*, mongo::ShardsvrMoveRange const&)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
000000000417dc6a t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::registerDonateChunk(mongo::OperationContext*, mongo::ShardsvrMoveRange const&)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::registerDonateChunk(mongo::OperationContext*, mongo::ShardsvrMoveRange const&)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
000000000417b5c0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::registerDonateChunk(mongo::OperationContext*, mongo::ShardsvrMoveRange const&)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::registerDonateChunk(mongo::OperationContext*, mongo::ShardsvrMoveRange const&)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
000000000417e570 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::registerDonateChunk(mongo::OperationContext*, mongo::ShardsvrMoveRange const&)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::registerDonateChunk(mongo::OperationContext*, mongo::ShardsvrMoveRange const&)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004178740 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::registerReceiveChunk(mongo::OperationContext*, mongo::NamespaceString const&, mongo::ChunkRange const&, mongo::ShardId const&, bool)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::registerReceiveChunk(mongo::OperationContext*, mongo::NamespaceString const&, mongo::ChunkRange const&, mongo::ShardId const&, bool)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
000000000417dcb6 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::registerReceiveChunk(mongo::OperationContext*, mongo::NamespaceString const&, mongo::ChunkRange const&, mongo::ShardId const&, bool)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::registerReceiveChunk(mongo::OperationContext*, mongo::NamespaceString const&, mongo::ChunkRange const&, mongo::ShardId const&, bool)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004178b50 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::registerReceiveChunk(mongo::OperationContext*, mongo::NamespaceString const&, mongo::ChunkRange const&, mongo::ShardId const&, bool)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::registerReceiveChunk(mongo::OperationContext*, mongo::NamespaceString const&, mongo::ChunkRange const&, mongo::ShardId const&, bool)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
000000000417dde6 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::registerReceiveChunk(mongo::OperationContext*, mongo::NamespaceString const&, mongo::ChunkRange const&, mongo::ShardId const&, bool)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::registerReceiveChunk(mongo::OperationContext*, mongo::NamespaceString const&, mongo::ChunkRange const&, mongo::ShardId const&, bool)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004178810 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::registerSplitOrMergeChunk(mongo::OperationContext*, mongo::NamespaceString const&, mongo::ChunkRange const&)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::registerSplitOrMergeChunk(mongo::OperationContext*, mongo::NamespaceString const&, mongo::ChunkRange const&)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
000000000417dd02 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::registerSplitOrMergeChunk(mongo::OperationContext*, mongo::NamespaceString const&, mongo::ChunkRange const&)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::registerSplitOrMergeChunk(mongo::OperationContext*, mongo::NamespaceString const&, mongo::ChunkRange const&)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
000000000417b850 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::registerSplitOrMergeChunk(mongo::OperationContext*, mongo::NamespaceString const&, mongo::ChunkRange const&)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::registerSplitOrMergeChunk(mongo::OperationContext*, mongo::NamespaceString const&, mongo::ChunkRange const&)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
000000000417e5bc t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::registerSplitOrMergeChunk(mongo::OperationContext*, mongo::NamespaceString const&, mongo::ChunkRange const&)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::registerSplitOrMergeChunk(mongo::OperationContext*, mongo::NamespaceString const&, mongo::ChunkRange const&)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
000000000417bdf0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::registerSplitOrMergeChunk(mongo::OperationContext*, mongo::NamespaceString const&, mongo::ChunkRange const&)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::registerSplitOrMergeChunk(mongo::OperationContext*, mongo::NamespaceString const&, mongo::ChunkRange const&)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#4}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
00000000041785a0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::lock(mongo::OperationContext*, mongo::StringData)::{lambda()#4}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::lock(mongo::OperationContext*, mongo::StringData)::{lambda()#4})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
000000000417dc1e t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::lock(mongo::OperationContext*, mongo::StringData)::{lambda()#4}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::lock(mongo::OperationContext*, mongo::StringData)::{lambda()#4})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004178a10 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::lock(mongo::OperationContext*, mongo::StringData)::{lambda()#4}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::lock(mongo::OperationContext*, mongo::StringData)::{lambda()#4})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
000000000417dd9a t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::lock(mongo::OperationContext*, mongo::StringData)::{lambda()#4}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::lock(mongo::OperationContext*, mongo::StringData)::{lambda()#4})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
00000000041784d0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::lock(mongo::OperationContext*, mongo::StringData)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::lock(mongo::OperationContext*, mongo::StringData)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
000000000417dbd2 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::lock(mongo::OperationContext*, mongo::StringData)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::lock(mongo::OperationContext*, mongo::StringData)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
00000000041788e0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::lock(mongo::OperationContext*, mongo::StringData)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::lock(mongo::OperationContext*, mongo::StringData)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
000000000417dd4e t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::lock(mongo::OperationContext*, mongo::StringData)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::lock(mongo::OperationContext*, mongo::StringData)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
000000000421a710 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::MigrationChunkClonerSource::CloneList::getNextDoc(mongo::OperationContext*, mongo::CollectionPtr const&, int*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::MigrationChunkClonerSource::CloneList::getNextDoc(mongo::OperationContext*, mongo::CollectionPtr const&, int*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
00000000042268b2 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::MigrationChunkClonerSource::CloneList::getNextDoc(mongo::OperationContext*, mongo::CollectionPtr const&, int*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::MigrationChunkClonerSource::CloneList::getNextDoc(mongo::OperationContext*, mongo::CollectionPtr const&, int*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
000000000421a860 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::MigrationChunkClonerSource::CloneList::getNextDoc(mongo::OperationContext*, mongo::CollectionPtr const&, int*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::MigrationChunkClonerSource::CloneList::getNextDoc(mongo::OperationContext*, mongo::CollectionPtr const&, int*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
00000000042268fe t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::MigrationChunkClonerSource::CloneList::getNextDoc(mongo::OperationContext*, mongo::CollectionPtr const&, int*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::MigrationChunkClonerSource::CloneList::getNextDoc(mongo::OperationContext*, mongo::CollectionPtr const&, int*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004236330 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::MigrationDestinationManager::report(mongo::BSONObjBuilder&, mongo::OperationContext*, bool)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::MigrationDestinationManager::report(mongo::BSONObjBuilder&, mongo::OperationContext*, bool)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000004248266 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::MigrationDestinationManager::report(mongo::BSONObjBuilder&, mongo::OperationContext*, bool)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::MigrationDestinationManager::report(mongo::BSONObjBuilder&, mongo::OperationContext*, bool)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004236400 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::MigrationDestinationManager::report(mongo::BSONObjBuilder&, mongo::OperationContext*, bool)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::MigrationDestinationManager::report(mongo::BSONObjBuilder&, mongo::OperationContext*, bool)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
00000000042482b2 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::MigrationDestinationManager::report(mongo::BSONObjBuilder&, mongo::OperationContext*, bool)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::MigrationDestinationManager::report(mongo::BSONObjBuilder&, mongo::OperationContext*, bool)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000007190990 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::CondVarLockGrantNotification::wait(mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::CondVarLockGrantNotification::wait(mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000007196d58 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::CondVarLockGrantNotification::wait(mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::CondVarLockGrantNotification::wait(mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000007190ae0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::CondVarLockGrantNotification::wait(mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::CondVarLockGrantNotification::wait(mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000007196da4 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::CondVarLockGrantNotification::wait(mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::CondVarLockGrantNotification::wait(mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004dbec90 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::IndexBuildsCoordinatorMongod::_startIndexBuild(mongo::OperationContext*, mongo::DatabaseName const&, mongo::UUID const&, std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const&, mongo::UUID const&, mongo::IndexBuildProtocol, mongo::IndexBuildsCoordinator::IndexBuildOptions, boost::optional<mongo::ResumeIndexInfo> const&)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::IndexBuildsCoordinatorMongod::_startIndexBuild(mongo::OperationContext*, mongo::DatabaseName const&, mongo::UUID const&, std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const&, mongo::UUID const&, mongo::IndexBuildProtocol, mongo::IndexBuildsCoordinator::IndexBuildOptions, boost::optional<mongo::ResumeIndexInfo> const&)::{lambda()#3})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000004dc9756 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::IndexBuildsCoordinatorMongod::_startIndexBuild(mongo::OperationContext*, mongo::DatabaseName const&, mongo::UUID const&, std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const&, mongo::UUID const&, mongo::IndexBuildProtocol, mongo::IndexBuildsCoordinator::IndexBuildOptions, boost::optional<mongo::ResumeIndexInfo> const&)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::IndexBuildsCoordinatorMongod::_startIndexBuild(mongo::OperationContext*, mongo::DatabaseName const&, mongo::UUID const&, std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const&, mongo::UUID const&, mongo::IndexBuildProtocol, mongo::IndexBuildsCoordinator::IndexBuildOptions, boost::optional<mongo::ResumeIndexInfo> const&)::{lambda()#3})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004dc1dc0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::IndexBuildsCoordinatorMongod::_startIndexBuild(mongo::OperationContext*, mongo::DatabaseName const&, mongo::UUID const&, std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const&, mongo::UUID const&, mongo::IndexBuildProtocol, mongo::IndexBuildsCoordinator::IndexBuildOptions, boost::optional<mongo::ResumeIndexInfo> const&)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::IndexBuildsCoordinatorMongod::_startIndexBuild(mongo::OperationContext*, mongo::DatabaseName const&, mongo::UUID const&, std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const&, mongo::UUID const&, mongo::IndexBuildProtocol, mongo::IndexBuildsCoordinator::IndexBuildOptions, boost::optional<mongo::ResumeIndexInfo> const&)::{lambda()#3})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000004dc9f14 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::IndexBuildsCoordinatorMongod::_startIndexBuild(mongo::OperationContext*, mongo::DatabaseName const&, mongo::UUID const&, std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const&, mongo::UUID const&, mongo::IndexBuildProtocol, mongo::IndexBuildsCoordinator::IndexBuildOptions, boost::optional<mongo::ResumeIndexInfo> const&)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::IndexBuildsCoordinatorMongod::_startIndexBuild(mongo::OperationContext*, mongo::DatabaseName const&, mongo::UUID const&, std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const&, mongo::UUID const&, mongo::IndexBuildProtocol, mongo::IndexBuildsCoordinator::IndexBuildOptions, boost::optional<mongo::ResumeIndexInfo> const&)::{lambda()#3})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004dc2010 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::IndexBuildsCoordinatorMongod::_startIndexBuild(mongo::OperationContext*, mongo::DatabaseName const&, mongo::UUID const&, std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const&, mongo::UUID const&, mongo::IndexBuildProtocol, mongo::IndexBuildsCoordinator::IndexBuildOptions, boost::optional<mongo::ResumeIndexInfo> const&)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::IndexBuildsCoordinatorMongod::_startIndexBuild(mongo::OperationContext*, mongo::DatabaseName const&, mongo::UUID const&, std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const&, mongo::UUID const&, mongo::IndexBuildProtocol, mongo::IndexBuildsCoordinator::IndexBuildOptions, boost::optional<mongo::ResumeIndexInfo> const&)::{lambda()#3})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#4}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
000000000445f8d0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ShardServerCatalogCacheLoader::waitForDatabaseFlush(mongo::OperationContext*, mongo::StringData)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ShardServerCatalogCacheLoader::waitForDatabaseFlush(mongo::OperationContext*, mongo::StringData)::{lambda()#3})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
000000000446db2c t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ShardServerCatalogCacheLoader::waitForDatabaseFlush(mongo::OperationContext*, mongo::StringData)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ShardServerCatalogCacheLoader::waitForDatabaseFlush(mongo::OperationContext*, mongo::StringData)::{lambda()#3})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
000000000445f6e0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ShardServerCatalogCacheLoader::waitForCollectionFlush(mongo::OperationContext*, mongo::NamespaceString const&)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ShardServerCatalogCacheLoader::waitForCollectionFlush(mongo::OperationContext*, mongo::NamespaceString const&)::{lambda()#3})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
000000000446dac2 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ShardServerCatalogCacheLoader::waitForCollectionFlush(mongo::OperationContext*, mongo::NamespaceString const&)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ShardServerCatalogCacheLoader::waitForCollectionFlush(mongo::OperationContext*, mongo::NamespaceString const&)::{lambda()#3})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
00000000044d2190 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::TransactionCoordinatorCatalog::_waitForStepUpToComplete(std::unique_lock<std::mutex>&, mongo::OperationContext*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::TransactionCoordinatorCatalog::_waitForStepUpToComplete(std::unique_lock<std::mutex>&, mongo::OperationContext*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
00000000044d6096 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::TransactionCoordinatorCatalog::_waitForStepUpToComplete(std::unique_lock<std::mutex>&, mongo::OperationContext*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::TransactionCoordinatorCatalog::_waitForStepUpToComplete(std::unique_lock<std::mutex>&, mongo::OperationContext*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
00000000044d2260 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::TransactionCoordinatorCatalog::_waitForStepUpToComplete(std::unique_lock<std::mutex>&, mongo::OperationContext*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::TransactionCoordinatorCatalog::_waitForStepUpToComplete(std::unique_lock<std::mutex>&, mongo::OperationContext*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
00000000044d60e2 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::TransactionCoordinatorCatalog::_waitForStepUpToComplete(std::unique_lock<std::mutex>&, mongo::OperationContext*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::TransactionCoordinatorCatalog::_waitForStepUpToComplete(std::unique_lock<std::mutex>&, mongo::OperationContext*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004fb93e0 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::TrafficRecorder::Recording::TrafficRecordingPacket, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::TrafficRecorder::Recording::CostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::TrafficRecorder::Recording::TrafficRecordingPacket, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::TrafficRecorder::Recording::CostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000004fb94f0 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::TrafficRecorder::Recording::TrafficRecordingPacket, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::TrafficRecorder::Recording::CostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::TrafficRecorder::Recording::TrafficRecordingPacket, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::TrafficRecorder::Recording::CostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000004fb96c0 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::TrafficRecorder::Recording::TrafficRecordingPacket, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::TrafficRecorder::Recording::CostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::TrafficRecorder::Recording::TrafficRecordingPacket, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::TrafficRecorder::Recording::CostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#4}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000004fb6320 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::TrafficRecorder::Recording::TrafficRecordingPacket, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::TrafficRecorder::Recording::CostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::TrafficRecorder::Recording::TrafficRecordingPacket, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::TrafficRecorder::Recording::CostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000004fb6430 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::TrafficRecorder::Recording::TrafficRecordingPacket, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::TrafficRecorder::Recording::CostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::TrafficRecorder::Recording::TrafficRecordingPacket, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::TrafficRecorder::Recording::CostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000004fb6640 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::TrafficRecorder::Recording::TrafficRecordingPacket, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::TrafficRecorder::Recording::CostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::TrafficRecorder::Recording::TrafficRecordingPacket, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::TrafficRecorder::Recording::CostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#4}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000003d35740 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::unique_function<void (mongo::Status)>, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::unique_function<void (mongo::Status)>, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000003d35910 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::unique_function<void (mongo::Status)>, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::unique_function<void (mongo::Status)>, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000003d35cf0 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::unique_function<void (mongo::Status)>, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::unique_function<void (mongo::Status)>, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#4}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000004fc3af0 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::unique_function<void (mongo::Status)>, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::unique_function<void (mongo::Status)>, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000004fc3cc0 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::unique_function<void (mongo::Status)>, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::unique_function<void (mongo::Status)>, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
00000000057e8ea0 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::AsyncRequestsSender::Response, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::AsyncRequestsSender::Response, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
00000000057e8fb0 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::AsyncRequestsSender::Response, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::AsyncRequestsSender::Response, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
00000000057e8350 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::AsyncRequestsSender::Response, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::AsyncRequestsSender::Response, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
00000000057e8460 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::AsyncRequestsSender::Response, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::AsyncRequestsSender::Response, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
00000000048d1e60 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::repl::TenantFileImporterService::ImporterEvent, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::repl::TenantFileImporterService::ImporterEvent, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
00000000048d2020 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::repl::TenantFileImporterService::ImporterEvent, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::repl::TenantFileImporterService::ImporterEvent, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
00000000048d2430 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::repl::TenantFileImporterService::ImporterEvent, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::repl::TenantFileImporterService::ImporterEvent, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#4}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000004250440 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::BSONObj, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::BSONObj, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000004250550 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::BSONObj, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::BSONObj, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
000000000424f7f0 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::BSONObj, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::BSONObj, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
000000000424f900 W mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::BSONObj, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::BSONObj, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000004b81f20 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::OplogFetcher::_runQuery(mongo::executor::TaskExecutor::CallbackArgs const&)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::OplogFetcher::_runQuery(mongo::executor::TaskExecutor::CallbackArgs const&)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000004b8af72 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::OplogFetcher::_runQuery(mongo::executor::TaskExecutor::CallbackArgs const&)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::OplogFetcher::_runQuery(mongo::executor::TaskExecutor::CallbackArgs const&)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004b820a0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::OplogFetcher::_runQuery(mongo::executor::TaskExecutor::CallbackArgs const&)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::OplogFetcher::_runQuery(mongo::executor::TaskExecutor::CallbackArgs const&)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000004b8afbe t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::OplogFetcher::_runQuery(mongo::executor::TaskExecutor::CallbackArgs const&)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::OplogFetcher::_runQuery(mongo::executor::TaskExecutor::CallbackArgs const&)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004b924c0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::OplogBufferCollection::waitForDataFor(mongo::Duration<std::ratio<1l, 1000l> >, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::OplogBufferCollection::waitForDataFor(mongo::Duration<std::ratio<1l, 1000l> >, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000004b97c4c t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::OplogBufferCollection::waitForDataFor(mongo::Duration<std::ratio<1l, 1000l> >, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::OplogBufferCollection::waitForDataFor(mongo::Duration<std::ratio<1l, 1000l> >, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004b92660 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::OplogBufferCollection::waitForDataFor(mongo::Duration<std::ratio<1l, 1000l> >, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::OplogBufferCollection::waitForDataFor(mongo::Duration<std::ratio<1l, 1000l> >, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000004b97ce4 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::OplogBufferCollection::waitForDataFor(mongo::Duration<std::ratio<1l, 1000l> >, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::OplogBufferCollection::waitForDataFor(mongo::Duration<std::ratio<1l, 1000l> >, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004b92590 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::OplogBufferCollection::waitForDataUntil(mongo::Date_t, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::OplogBufferCollection::waitForDataUntil(mongo::Date_t, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000004b97c98 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::OplogBufferCollection::waitForDataUntil(mongo::Date_t, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::OplogBufferCollection::waitForDataUntil(mongo::Date_t, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004b92790 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::OplogBufferCollection::waitForDataUntil(mongo::Date_t, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::OplogBufferCollection::waitForDataUntil(mongo::Date_t, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000004b97d30 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::OplogBufferCollection::waitForDataUntil(mongo::Date_t, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::OplogBufferCollection::waitForDataUntil(mongo::Date_t, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004882380 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::OplogBufferBlockingQueue::waitForDataFor(mongo::Duration<std::ratio<1l, 1000l> >, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::OplogBufferBlockingQueue::waitForDataFor(mongo::Duration<std::ratio<1l, 1000l> >, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
000000000488469c t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::OplogBufferBlockingQueue::waitForDataFor(mongo::Duration<std::ratio<1l, 1000l> >, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::OplogBufferBlockingQueue::waitForDataFor(mongo::Duration<std::ratio<1l, 1000l> >, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
00000000048826a0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::OplogBufferBlockingQueue::waitForDataFor(mongo::Duration<std::ratio<1l, 1000l> >, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::OplogBufferBlockingQueue::waitForDataFor(mongo::Duration<std::ratio<1l, 1000l> >, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000004884734 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::OplogBufferBlockingQueue::waitForDataFor(mongo::Duration<std::ratio<1l, 1000l> >, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::OplogBufferBlockingQueue::waitForDataFor(mongo::Duration<std::ratio<1l, 1000l> >, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004882510 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::OplogBufferBlockingQueue::waitForDataUntil(mongo::Date_t, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::OplogBufferBlockingQueue::waitForDataUntil(mongo::Date_t, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
00000000048846e8 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::OplogBufferBlockingQueue::waitForDataUntil(mongo::Date_t, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::OplogBufferBlockingQueue::waitForDataUntil(mongo::Date_t, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004882a60 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::OplogBufferBlockingQueue::waitForDataUntil(mongo::Date_t, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::OplogBufferBlockingQueue::waitForDataUntil(mongo::Date_t, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000004884780 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::OplogBufferBlockingQueue::waitForDataUntil(mongo::Date_t, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::OplogBufferBlockingQueue::waitForDataUntil(mongo::Date_t, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000003c210c0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::ReplicationCoordinatorImpl::waitForMemberState(mongo::Interruptible*, mongo::repl::MemberState, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::ReplicationCoordinatorImpl::waitForMemberState(mongo::Interruptible*, mongo::repl::MemberState, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000003c4e22c t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::ReplicationCoordinatorImpl::waitForMemberState(mongo::Interruptible*, mongo::repl::MemberState, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::ReplicationCoordinatorImpl::waitForMemberState(mongo::Interruptible*, mongo::repl::MemberState, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000003c20f00 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::ReplicationCoordinatorImpl::waitUntilMajorityOpTime(mongo::OperationContext*, mongo::repl::OpTime, boost::optional<mongo::Date_t>)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::ReplicationCoordinatorImpl::waitUntilMajorityOpTime(mongo::OperationContext*, mongo::repl::OpTime, boost::optional<mongo::Date_t>)::{lambda()#3})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000003c4e1c2 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::ReplicationCoordinatorImpl::waitUntilMajorityOpTime(mongo::OperationContext*, mongo::repl::OpTime, boost::optional<mongo::Date_t>)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::ReplicationCoordinatorImpl::waitUntilMajorityOpTime(mongo::OperationContext*, mongo::repl::OpTime, boost::optional<mongo::Date_t>)::{lambda()#3})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000003c21620 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::ReplicationCoordinatorImpl::waitUntilMajorityOpTime(mongo::OperationContext*, mongo::repl::OpTime, boost::optional<mongo::Date_t>)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::ReplicationCoordinatorImpl::waitUntilMajorityOpTime(mongo::OperationContext*, mongo::repl::OpTime, boost::optional<mongo::Date_t>)::{lambda()#3})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000003c4e344 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::ReplicationCoordinatorImpl::waitUntilMajorityOpTime(mongo::OperationContext*, mongo::repl::OpTime, boost::optional<mongo::Date_t>)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::ReplicationCoordinatorImpl::waitUntilMajorityOpTime(mongo::OperationContext*, mongo::repl::OpTime, boost::optional<mongo::Date_t>)::{lambda()#3})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000003c21260 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::ReplicationCoordinatorImpl::waitUntilSnapshotCommitted(mongo::OperationContext*, mongo::Timestamp const&)::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::ReplicationCoordinatorImpl::waitUntilSnapshotCommitted(mongo::OperationContext*, mongo::Timestamp const&)::{lambda()#2})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000003c4e296 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::ReplicationCoordinatorImpl::waitUntilSnapshotCommitted(mongo::OperationContext*, mongo::Timestamp const&)::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::ReplicationCoordinatorImpl::waitUntilSnapshotCommitted(mongo::OperationContext*, mongo::Timestamp const&)::{lambda()#2})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
00000000065cb8c0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::mozjs::MozJSProxyScope::runOnImplThread(mongo::unique_function<void ()>)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::mozjs::MozJSProxyScope::runOnImplThread(mongo::unique_function<void ()>)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
00000000065cff56 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::mozjs::MozJSProxyScope::runOnImplThread(mongo::unique_function<void ()>)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::mozjs::MozJSProxyScope::runOnImplThread(mongo::unique_function<void ()>)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
00000000065cba50 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::mozjs::MozJSProxyScope::runOnImplThread(mongo::unique_function<void ()>)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::mozjs::MozJSProxyScope::runOnImplThread(mongo::unique_function<void ()>)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
00000000065cffa2 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::mozjs::MozJSProxyScope::runOnImplThread(mongo::unique_function<void ()>)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::mozjs::MozJSProxyScope::runOnImplThread(mongo::unique_function<void ()>)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000005801c00 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Fetcher::join(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Fetcher::join(mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000005805fd4 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Fetcher::join(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Fetcher::join(mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000005801d80 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Fetcher::join(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Fetcher::join(mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000005806020 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Fetcher::join(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Fetcher::join(mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
00000000045ba3b0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Balancer::joinCurrentRound(mongo::OperationContext*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Balancer::joinCurrentRound(mongo::OperationContext*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
00000000045cb4ac t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Balancer::joinCurrentRound(mongo::OperationContext*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Balancer::joinCurrentRound(mongo::OperationContext*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
00000000045ba500 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Balancer::joinCurrentRound(mongo::OperationContext*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Balancer::joinCurrentRound(mongo::OperationContext*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
00000000045cb52c t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Balancer::joinCurrentRound(mongo::OperationContext*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Balancer::joinCurrentRound(mongo::OperationContext*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000005761180 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::executor::AsyncMulticaster::multicast(std::vector<mongo::HostAndPort, std::allocator<mongo::HostAndPort> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::executor::AsyncMulticaster::multicast(std::vector<mongo::HostAndPort, std::allocator<mongo::HostAndPort> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#3})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000005762f0c t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::executor::AsyncMulticaster::multicast(std::vector<mongo::HostAndPort, std::allocator<mongo::HostAndPort> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::executor::AsyncMulticaster::multicast(std::vector<mongo::HostAndPort, std::allocator<mongo::HostAndPort> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#3})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000005761650 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::executor::AsyncMulticaster::multicast(std::vector<mongo::HostAndPort, std::allocator<mongo::HostAndPort> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::executor::AsyncMulticaster::multicast(std::vector<mongo::HostAndPort, std::allocator<mongo::HostAndPort> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#3})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000005762fa4 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::executor::AsyncMulticaster::multicast(std::vector<mongo::HostAndPort, std::allocator<mongo::HostAndPort> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::executor::AsyncMulticaster::multicast(std::vector<mongo::HostAndPort, std::allocator<mongo::HostAndPort> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#3})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000005760ff0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::executor::AsyncMulticaster::multicast(std::vector<mongo::HostAndPort, std::allocator<mongo::HostAndPort> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::executor::AsyncMulticaster::multicast(std::vector<mongo::HostAndPort, std::allocator<mongo::HostAndPort> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000005762ec0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::executor::AsyncMulticaster::multicast(std::vector<mongo::HostAndPort, std::allocator<mongo::HostAndPort> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::executor::AsyncMulticaster::multicast(std::vector<mongo::HostAndPort, std::allocator<mongo::HostAndPort> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000005761310 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::executor::AsyncMulticaster::multicast(std::vector<mongo::HostAndPort, std::allocator<mongo::HostAndPort> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::executor::AsyncMulticaster::multicast(std::vector<mongo::HostAndPort, std::allocator<mongo::HostAndPort> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000005762f58 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::executor::AsyncMulticaster::multicast(std::vector<mongo::HostAndPort, std::allocator<mongo::HostAndPort> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::executor::AsyncMulticaster::multicast(std::vector<mongo::HostAndPort, std::allocator<mongo::HostAndPort> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000006f400a0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::executor::ThreadPoolTaskExecutor::waitForEvent(mongo::OperationContext*, mongo::executor::TaskExecutor::EventHandle const&, mongo::Date_t)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::executor::ThreadPoolTaskExecutor::waitForEvent(mongo::OperationContext*, mongo::executor::TaskExecutor::EventHandle const&, mongo::Date_t)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000006f47b62 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::executor::ThreadPoolTaskExecutor::waitForEvent(mongo::OperationContext*, mongo::executor::TaskExecutor::EventHandle const&, mongo::Date_t)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::executor::ThreadPoolTaskExecutor::waitForEvent(mongo::OperationContext*, mongo::executor::TaskExecutor::EventHandle const&, mongo::Date_t)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000006f40240 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::executor::ThreadPoolTaskExecutor::waitForEvent(mongo::OperationContext*, mongo::executor::TaskExecutor::EventHandle const&, mongo::Date_t)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::executor::ThreadPoolTaskExecutor::waitForEvent(mongo::OperationContext*, mongo::executor::TaskExecutor::EventHandle const&, mongo::Date_t)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000006f47bfa t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::executor::ThreadPoolTaskExecutor::waitForEvent(mongo::OperationContext*, mongo::executor::TaskExecutor::EventHandle const&, mongo::Date_t)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::executor::ThreadPoolTaskExecutor::waitForEvent(mongo::OperationContext*, mongo::executor::TaskExecutor::EventHandle const&, mongo::Date_t)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000006f40170 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::executor::ThreadPoolTaskExecutor::wait(mongo::executor::TaskExecutor::CallbackHandle const&, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::executor::ThreadPoolTaskExecutor::wait(mongo::executor::TaskExecutor::CallbackHandle const&, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const
0000000006f47bae t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::executor::ThreadPoolTaskExecutor::wait(mongo::executor::TaskExecutor::CallbackHandle const&, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::executor::ThreadPoolTaskExecutor::wait(mongo::executor::TaskExecutor::CallbackHandle const&, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Interruptible::WakeSpeed)#2}::operator()(mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000006f40370 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::executor::ThreadPoolTaskExecutor::wait(mongo::executor::TaskExecutor::CallbackHandle const&, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::executor::ThreadPoolTaskExecutor::wait(mongo::executor::TaskExecutor::CallbackHandle const&, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000006f47c46 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::executor::ThreadPoolTaskExecutor::wait(mongo::executor::TaskExecutor::CallbackHandle const&, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::executor::ThreadPoolTaskExecutor::wait(mongo::executor::TaskExecutor::CallbackHandle const&, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
00000000047b57f0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::ShardMergeRecipientService::Instance::waitUntilMigrationReachesReturnAfterReachingTimestamp(mongo::OperationContext*, mongo::Timestamp const&)::{lambda()#1}::operator()() const::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::ShardMergeRecipientService::Instance::waitUntilMigrationReachesReturnAfterReachingTimestamp(mongo::OperationContext*, mongo::Timestamp const&)::{lambda()#1}::operator()() const::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
00000000047de7a0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::ShardMergeRecipientService::Instance::waitUntilMigrationReachesReturnAfterReachingTimestamp(mongo::OperationContext*, mongo::Timestamp const&)::{lambda()#1}::operator()() const::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::ShardMergeRecipientService::Instance::waitUntilMigrationReachesReturnAfterReachingTimestamp(mongo::OperationContext*, mongo::Timestamp const&)::{lambda()#1}::operator()() const::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000004700ac0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::TenantMigrationRecipientService::Instance::waitUntilMigrationReachesReturnAfterReachingTimestamp(mongo::OperationContext*, mongo::Timestamp const&)::{lambda()#1}::operator()() const::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::TenantMigrationRecipientService::Instance::waitUntilMigrationReachesReturnAfterReachingTimestamp(mongo::OperationContext*, mongo::Timestamp const&)::{lambda()#1}::operator()() const::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const
0000000004732718 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::TenantMigrationRecipientService::Instance::waitUntilMigrationReachesReturnAfterReachingTimestamp(mongo::OperationContext*, mongo::Timestamp const&)::{lambda()#1}::operator()() const::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::TenantMigrationRecipientService::Instance::waitUntilMigrationReachesReturnAfterReachingTimestamp(mongo::OperationContext*, mongo::Timestamp const&)::{lambda()#1}::operator()() const::{lambda()#1})::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#3}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const [clone .cold]
0000000006f42450 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}&&)::SpecificImpl::call(mongo::Status&&)
0000000006f47fb4 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}&&)::SpecificImpl::call(mongo::Status&&) [clone .cold]
0000000006f40d80 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}&&)::SpecificImpl::~SpecificImpl()
0000000006f40d50 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}&&)::SpecificImpl::~SpecificImpl()
0000000006f40d50 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}&&)::SpecificImpl::~SpecificImpl()
0000000006f426f0 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(auto:1)#3}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(auto:1)#3}&&)::SpecificImpl::call(mongo::Status&&)
0000000006f4803c t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(auto:1)#3}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(auto:1)#3}&&)::SpecificImpl::call(mongo::Status&&) [clone .cold]
0000000006f40df0 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(auto:1)#3}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(auto:1)#3}&&)::SpecificImpl::~SpecificImpl()
0000000006f40dc0 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(auto:1)#3}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(auto:1)#3}&&)::SpecificImpl::~SpecificImpl()
0000000006f40dc0 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(auto:1)#3}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(auto:1)#3}&&)::SpecificImpl::~SpecificImpl()
0000000006f44a50 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}>(mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)
0000000006f4856e t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}>(mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&) [clone .cold]
0000000006f40ed0 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}>(mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f40ea0 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}>(mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f40ea0 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}>(mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f44d10 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(auto:1)#2}>(mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(auto:1)#2}&&)::SpecificImpl::call(mongo::Status&&)
0000000006f485f6 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(auto:1)#2}>(mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(auto:1)#2}&&)::SpecificImpl::call(mongo::Status&&) [clone .cold]
0000000006f40f40 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(auto:1)#2}>(mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(auto:1)#2}&&)::SpecificImpl::~SpecificImpl()
0000000006f40f10 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(auto:1)#2}>(mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(auto:1)#2}&&)::SpecificImpl::~SpecificImpl()
0000000006f40f10 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(auto:1)#2}>(mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(auto:1)#2}&&)::SpecificImpl::~SpecificImpl()
0000000006f4ac80 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::NetworkInterfaceThreadPool::_consumeTasks(std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}>(mongo::executor::NetworkInterfaceThreadPool::_consumeTasks(std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)
0000000006f4b3ee t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::NetworkInterfaceThreadPool::_consumeTasks(std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}>(mongo::executor::NetworkInterfaceThreadPool::_consumeTasks(std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&) [clone .cold]
0000000006f4a2a0 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::NetworkInterfaceThreadPool::_consumeTasks(std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}>(mongo::executor::NetworkInterfaceThreadPool::_consumeTasks(std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f4a290 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::NetworkInterfaceThreadPool::_consumeTasks(std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}>(mongo::executor::NetworkInterfaceThreadPool::_consumeTasks(std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f4a290 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::NetworkInterfaceThreadPool::_consumeTasks(std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}>(mongo::executor::NetworkInterfaceThreadPool::_consumeTasks(std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f42610 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}::operator()(mongo::Status) const::{lambda(auto:1)#1}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}::operator()(mongo::Status) const::{lambda(auto:1)#1}&&)::SpecificImpl::call(mongo::Status&&)
0000000006f47ff8 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}::operator()(mongo::Status) const::{lambda(auto:1)#1}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}::operator()(mongo::Status) const::{lambda(auto:1)#1}&&)::SpecificImpl::call(mongo::Status&&) [clone .cold]
0000000006f40d10 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}::operator()(mongo::Status) const::{lambda(auto:1)#1}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}::operator()(mongo::Status) const::{lambda(auto:1)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f40ce0 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}::operator()(mongo::Status) const::{lambda(auto:1)#1}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}::operator()(mongo::Status) const::{lambda(auto:1)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f40ce0 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}::operator()(mongo::Status) const::{lambda(auto:1)#1}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#2}::operator()(mongo::Status) const::{lambda(auto:1)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f44c20 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}::operator()(mongo::Status) const::{lambda(auto:1)#1}>(mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}::operator()(mongo::Status) const::{lambda(auto:1)#1}&&)::SpecificImpl::call(mongo::Status&&)
0000000006f485b2 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}::operator()(mongo::Status) const::{lambda(auto:1)#1}>(mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}::operator()(mongo::Status) const::{lambda(auto:1)#1}&&)::SpecificImpl::call(mongo::Status&&) [clone .cold]
0000000006f40e60 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}::operator()(mongo::Status) const::{lambda(auto:1)#1}>(mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}::operator()(mongo::Status) const::{lambda(auto:1)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f40e30 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}::operator()(mongo::Status) const::{lambda(auto:1)#1}>(mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}::operator()(mongo::Status) const::{lambda(auto:1)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f40e30 t mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}::operator()(mongo::Status) const::{lambda(auto:1)#1}>(mongo::executor::ThreadPoolTaskExecutor::scheduleExhaustIntoPool_inlock(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::unique_lock<std::mutex>)::{lambda(mongo::Status)#1}::operator()(mongo::Status) const::{lambda(auto:1)#1}&&)::SpecificImpl::~SpecificImpl()
00000000046efbe0 t mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::onCompletion<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::onCompletion<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)
00000000046f1d00 t mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::onCompletion<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::onCompletion<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&) [clone .cold]
00000000046eb8f0 t mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::onCompletion<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::onCompletion<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::~SpecificImpl()
00000000046eb8c0 t mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::onCompletion<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::onCompletion<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::~SpecificImpl()
00000000046eb8c0 t mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::onCompletion<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::onCompletion<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::~SpecificImpl()
00000000048643a0 t mongo::unique_function<void (mongo::executor::TaskExecutor::CallbackArgs const&)>::makeImpl<mongo::repl::InitialSyncer::_checkApplierProgressAndScheduleGetNextApplierBatch_inlock(std::lock_guard<std::mutex> const&, std::shared_ptr<mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> > >)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#3}>(mongo::repl::InitialSyncer::_checkApplierProgressAndScheduleGetNextApplierBatch_inlock(std::lock_guard<std::mutex> const&, std::shared_ptr<mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> > >)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#3}&&)::SpecificImpl::call(mongo::executor::TaskExecutor::CallbackArgs const&)
000000000485a3e0 t mongo::unique_function<void (mongo::executor::TaskExecutor::CallbackArgs const&)>::makeImpl<mongo::repl::InitialSyncer::_checkApplierProgressAndScheduleGetNextApplierBatch_inlock(std::lock_guard<std::mutex> const&, std::shared_ptr<mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> > >)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#3}>(mongo::repl::InitialSyncer::_checkApplierProgressAndScheduleGetNextApplierBatch_inlock(std::lock_guard<std::mutex> const&, std::shared_ptr<mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> > >)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#3}&&)::SpecificImpl::~SpecificImpl()
000000000485a3b0 t mongo::unique_function<void (mongo::executor::TaskExecutor::CallbackArgs const&)>::makeImpl<mongo::repl::InitialSyncer::_checkApplierProgressAndScheduleGetNextApplierBatch_inlock(std::lock_guard<std::mutex> const&, std::shared_ptr<mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> > >)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#3}>(mongo::repl::InitialSyncer::_checkApplierProgressAndScheduleGetNextApplierBatch_inlock(std::lock_guard<std::mutex> const&, std::shared_ptr<mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> > >)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#3}&&)::SpecificImpl::~SpecificImpl()
000000000485a3b0 t mongo::unique_function<void (mongo::executor::TaskExecutor::CallbackArgs const&)>::makeImpl<mongo::repl::InitialSyncer::_checkApplierProgressAndScheduleGetNextApplierBatch_inlock(std::lock_guard<std::mutex> const&, std::shared_ptr<mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> > >)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#3}>(mongo::repl::InitialSyncer::_checkApplierProgressAndScheduleGetNextApplierBatch_inlock(std::lock_guard<std::mutex> const&, std::shared_ptr<mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> > >)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#3}&&)::SpecificImpl::~SpecificImpl()
0000000003c69590 t mongo::unique_function<void (mongo::executor::TaskExecutor::CallbackArgs const&)>::makeImpl<mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#4}>(mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#4}&&)::SpecificImpl::call(mongo::executor::TaskExecutor::CallbackArgs const&)
0000000003c71b60 t mongo::unique_function<void (mongo::executor::TaskExecutor::CallbackArgs const&)>::makeImpl<mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#4}>(mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#4}&&)::SpecificImpl::call(mongo::executor::TaskExecutor::CallbackArgs const&) [clone .cold]
0000000003c64690 t mongo::unique_function<void (mongo::executor::TaskExecutor::CallbackArgs const&)>::makeImpl<mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#4}>(mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#4}&&)::SpecificImpl::~SpecificImpl()
0000000003c64650 t mongo::unique_function<void (mongo::executor::TaskExecutor::CallbackArgs const&)>::makeImpl<mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#4}>(mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#4}&&)::SpecificImpl::~SpecificImpl()
0000000003c64650 t mongo::unique_function<void (mongo::executor::TaskExecutor::CallbackArgs const&)>::makeImpl<mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#4}>(mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#4}&&)::SpecificImpl::~SpecificImpl()
0000000003c69510 t mongo::unique_function<void (mongo::executor::TaskExecutor::CallbackArgs const&)>::makeImpl<mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#6}>(mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#6}&&)::SpecificImpl::call(mongo::executor::TaskExecutor::CallbackArgs const&)
0000000003c71b4c t mongo::unique_function<void (mongo::executor::TaskExecutor::CallbackArgs const&)>::makeImpl<mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#6}>(mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#6}&&)::SpecificImpl::call(mongo::executor::TaskExecutor::CallbackArgs const&) [clone .cold]
0000000003c646a0 t mongo::unique_function<void (mongo::executor::TaskExecutor::CallbackArgs const&)>::makeImpl<mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#6}>(mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#6}&&)::SpecificImpl::~SpecificImpl()
0000000003c64660 t mongo::unique_function<void (mongo::executor::TaskExecutor::CallbackArgs const&)>::makeImpl<mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#6}>(mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#6}&&)::SpecificImpl::~SpecificImpl()
0000000003c64660 t mongo::unique_function<void (mongo::executor::TaskExecutor::CallbackArgs const&)>::makeImpl<mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#6}>(mongo::repl::ReplicationCoordinatorImpl::_handleHeartbeatResponseAction_inlock(mongo::repl::HeartbeatResponseAction const&, mongo::StatusWith<mongo::repl::ReplSetHeartbeatResponse> const&, std::unique_lock<std::mutex>)::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#6}&&)::SpecificImpl::~SpecificImpl()
0000000006f8e480 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::_addSession(mongo::transport::Session&, short)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::_addSession(mongo::transport::Session&, short)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::call(std::unique_lock<std::mutex>&&)
0000000006f8f7d2 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::_addSession(mongo::transport::Session&, short)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::_addSession(mongo::transport::Session&, short)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::call(std::unique_lock<std::mutex>&&) [clone .cold]
0000000006f8ae90 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::_addSession(mongo::transport::Session&, short)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::_addSession(mongo::transport::Session&, short)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f8e98a t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::_addSession(mongo::transport::Session&, short)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::_addSession(mongo::transport::Session&, short)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::~SpecificImpl() [clone .cold]
0000000006f8acc0 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::_addSession(mongo::transport::Session&, short)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::_addSession(mongo::transport::Session&, short)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f8acc0 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::_addSession(mongo::transport::Session&, short)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::_addSession(mongo::transport::Session&, short)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f8e782 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::_addSession(mongo::transport::Session&, short)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::_addSession(mongo::transport::Session&, short)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::~SpecificImpl() [clone .cold]
0000000006f8af00 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::_cancelTimer(unsigned long)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::_cancelTimer(unsigned long)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::call(std::unique_lock<std::mutex>&&)
0000000006f8e9e0 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::_cancelTimer(unsigned long)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::_cancelTimer(unsigned long)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::call(std::unique_lock<std::mutex>&&) [clone .cold]
0000000006f8a110 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::_cancelTimer(unsigned long)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::_cancelTimer(unsigned long)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f8a0c0 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::_cancelTimer(unsigned long)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::_cancelTimer(unsigned long)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f8a0c0 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::_cancelTimer(unsigned long)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::_cancelTimer(unsigned long)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f8b190 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::cancelSession(mongo::transport::Session&)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::cancelSession(mongo::transport::Session&)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::call(std::unique_lock<std::mutex>&&)
0000000006f8ea4e t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::cancelSession(mongo::transport::Session&)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::cancelSession(mongo::transport::Session&)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::call(std::unique_lock<std::mutex>&&) [clone .cold]
0000000006f8a100 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::cancelSession(mongo::transport::Session&)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::cancelSession(mongo::transport::Session&)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f8a0b0 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::cancelSession(mongo::transport::Session&)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::cancelSession(mongo::transport::Session&)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f8a0b0 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::cancelSession(mongo::transport::Session&)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::cancelSession(mongo::transport::Session&)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f8aba0 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::call(std::unique_lock<std::mutex>&&)
0000000006f8e72c t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::call(std::unique_lock<std::mutex>&&) [clone .cold]
0000000006f8a3e0 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f8a3b0 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f8a3b0 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f8e080 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::waitUntil(mongo::Date_t, mongo::CancellationToken const&)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::waitUntil(mongo::Date_t, mongo::CancellationToken const&)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::call(std::unique_lock<std::mutex>&&)
0000000006f8f74a t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::waitUntil(mongo::Date_t, mongo::CancellationToken const&)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::waitUntil(mongo::Date_t, mongo::CancellationToken const&)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::call(std::unique_lock<std::mutex>&&) [clone .cold]
0000000006f8ae20 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::waitUntil(mongo::Date_t, mongo::CancellationToken const&)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::waitUntil(mongo::Date_t, mongo::CancellationToken const&)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f8e934 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::waitUntil(mongo::Date_t, mongo::CancellationToken const&)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::waitUntil(mongo::Date_t, mongo::CancellationToken const&)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::~SpecificImpl() [clone .cold]
0000000006f8ad10 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::waitUntil(mongo::Date_t, mongo::CancellationToken const&)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::waitUntil(mongo::Date_t, mongo::CancellationToken const&)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f8ad10 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::waitUntil(mongo::Date_t, mongo::CancellationToken const&)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::waitUntil(mongo::Date_t, mongo::CancellationToken const&)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f8e7f6 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::waitUntil(mongo::Date_t, mongo::CancellationToken const&)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::waitUntil(mongo::Date_t, mongo::CancellationToken const&)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::~SpecificImpl() [clone .cold]
0000000006f8e290 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::waitUntil(mongo::transport::ReactorTimer const&, mongo::Date_t)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::waitUntil(mongo::transport::ReactorTimer const&, mongo::Date_t)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::call(std::unique_lock<std::mutex>&&)
0000000006f8f7b4 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::waitUntil(mongo::transport::ReactorTimer const&, mongo::Date_t)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::waitUntil(mongo::transport::ReactorTimer const&, mongo::Date_t)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::call(std::unique_lock<std::mutex>&&) [clone .cold]
0000000006f8adb0 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::waitUntil(mongo::transport::ReactorTimer const&, mongo::Date_t)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::waitUntil(mongo::transport::ReactorTimer const&, mongo::Date_t)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f8e8de t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::waitUntil(mongo::transport::ReactorTimer const&, mongo::Date_t)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::waitUntil(mongo::transport::ReactorTimer const&, mongo::Date_t)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::~SpecificImpl() [clone .cold]
0000000006f8ad60 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::waitUntil(mongo::transport::ReactorTimer const&, mongo::Date_t)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::waitUntil(mongo::transport::ReactorTimer const&, mongo::Date_t)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f8ad60 t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::waitUntil(mongo::transport::ReactorTimer const&, mongo::Date_t)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::waitUntil(mongo::transport::ReactorTimer const&, mongo::Date_t)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f8e86a t mongo::unique_function<void (std::unique_lock<std::mutex>)>::makeImpl<mongo::transport::AsioNetworkingBaton::waitUntil(mongo::transport::ReactorTimer const&, mongo::Date_t)::{lambda(std::unique_lock<std::mutex>)#1}>(mongo::transport::AsioNetworkingBaton::waitUntil(mongo::transport::ReactorTimer const&, mongo::Date_t)::{lambda(std::unique_lock<std::mutex>)#1}&&)::SpecificImpl::~SpecificImpl() [clone .cold]
0000000006f8a0a0 t mongo::unique_function<void ()>::makeImpl<mongo::transport::AsioNetworkingBaton::_poll[abi:cxx11](std::unique_lock<std::mutex>&, mongo::ClockSource*)::{lambda()#1}>(mongo::transport::AsioNetworkingBaton::_poll[abi:cxx11](std::unique_lock<std::mutex>&, mongo::ClockSource*)::{lambda()#1}&&)::SpecificImpl::call()
0000000006f8aaf0 t mongo::unique_function<void ()>::makeImpl<mongo::transport::AsioNetworkingBaton::_poll[abi:cxx11](std::unique_lock<std::mutex>&, mongo::ClockSource*)::{lambda()#1}>(mongo::transport::AsioNetworkingBaton::_poll[abi:cxx11](std::unique_lock<std::mutex>&, mongo::ClockSource*)::{lambda()#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f8aac0 t mongo::unique_function<void ()>::makeImpl<mongo::transport::AsioNetworkingBaton::_poll[abi:cxx11](std::unique_lock<std::mutex>&, mongo::ClockSource*)::{lambda()#1}>(mongo::transport::AsioNetworkingBaton::_poll[abi:cxx11](std::unique_lock<std::mutex>&, mongo::ClockSource*)::{lambda()#1}&&)::SpecificImpl::~SpecificImpl()
0000000006f8aac0 t mongo::unique_function<void ()>::makeImpl<mongo::transport::AsioNetworkingBaton::_poll[abi:cxx11](std::unique_lock<std::mutex>&, mongo::ClockSource*)::{lambda()#1}>(mongo::transport::AsioNetworkingBaton::_poll[abi:cxx11](std::unique_lock<std::mutex>&, mongo::ClockSource*)::{lambda()#1}&&)::SpecificImpl::~SpecificImpl()
0000000007fa1c80 b mongo::CollectionCatalog::write(mongo::ServiceContext*, std::function<void (mongo::CollectionCatalog&)>)::mutex
0000000004fb6760 W mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::TrafficRecorder::Recording::TrafficRecordingPacket, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::TrafficRecorder::Recording::CostFunction>::popManyUpTo(unsigned long, mongo::Interruptible*)::{lambda(std::unique_lock<std::mutex>&)#1}::operator()(std::unique_lock<std::mutex>&) const
0000000004fb97a0 W mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::TrafficRecorder::Recording::TrafficRecordingPacket, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::TrafficRecorder::Recording::CostFunction>::push(mongo::TrafficRecorder::Recording::TrafficRecordingPacket&&, mongo::Interruptible*)::{lambda(std::unique_lock<std::mutex>&)#1}::operator()(std::unique_lock<std::mutex>&) const
0000000007ef64c0 b mongo::InternalTransactionsTestCommandBase<mongo::(anonymous namespace)::InternalTransactionsTestCommandD>::Invocation::getTransactionExecutor()::mutex
00000000025f4c00 r mongo::repl::InitialSyncer::_checkApplierProgressAndScheduleGetNextApplierBatch_inlock(std::lock_guard<std::mutex> const&, std::shared_ptr<mongo::repl::CallbackCompletionGuard<mongo::StatusWith<mongo::repl::OpTimeAndWallTime> > >)::msg
0000000007e6ab30 d mongo::transport::AsioNetworkingBaton::_safeExecute(std::unique_lock<std::mutex>, mongo::unique_function<void (std::unique_lock<std::mutex>)>)::_failedAssertionSourceLocation
00000000046efb70 t mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::onCompletion<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .constprop.0] [clone .isra.0]
00000000046f1c90 t mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::onCompletion<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::VectorClockMongoD::_enqueueWaiterAndScheduleLoopIfNeeded(std::unique_lock<std::mutex>, mongo::VectorClock::VectorTime)::{lambda(auto:1)#1}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .constprop.0] [clone .isra.0] [clone .cold]
0000000007dfbbf0 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::CappedInsertNotifier::waitUntil(mongo::OperationContext*, unsigned long, mongo::Date_t) const::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::CappedInsertNotifier::waitUntil(mongo::OperationContext*, unsigned long, mongo::Date_t) const::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d5a050 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ShardingDDLCoordinatorService::waitForRecoveryCompletion(mongo::OperationContext*) const::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ShardingDDLCoordinatorService::waitForRecoveryCompletion(mongo::OperationContext*) const::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d5a070 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ShardingDDLCoordinatorService::waitForCoordinatorsOfGivenTypeToComplete(mongo::OperationContext*, mongo::DDLCoordinatorTypeEnum) const::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ShardingDDLCoordinatorService::waitForCoordinatorsOfGivenTypeToComplete(mongo::OperationContext*, mongo::DDLCoordinatorTypeEnum) const::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d9bf00 u mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Interruptible::sleepUntil(mongo::Date_t)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Interruptible::sleepUntil(mongo::Date_t)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000004bf212e t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Interruptible::sleepUntil(mongo::Date_t)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Interruptible::sleepUntil(mongo::Date_t)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::{lambda()#1}::operator()() const [clone .isra.0]
0000000007d2b9e0 u mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Interruptible::sleepFor(mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Interruptible::sleepFor(mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000003c4df0c t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Interruptible::sleepFor(mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Interruptible::sleepFor(mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::{lambda()#1}::operator()() const [clone .isra.0]
000000000473257a t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Interruptible::sleepFor(mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Interruptible::sleepFor(mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::{lambda()#1}::operator()() const [clone .isra.0]
00000000047de656 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Interruptible::sleepFor(mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Interruptible::sleepFor(mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::{lambda()#1}::operator()() const [clone .isra.0]
0000000004bf2112 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Interruptible::sleepFor(mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Interruptible::sleepFor(mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::{lambda()#1}::operator()() const [clone .isra.0]
0000000004dc9720 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Interruptible::sleepFor(mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Interruptible::sleepFor(mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::{lambda()#1}::operator()() const [clone .isra.0]
0000000007da39a0 u mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ValidateCmd::run(mongo::OperationContext*, mongo::DatabaseName const&, mongo::BSONObj const&, mongo::BSONObjBuilder&)::{lambda()#12}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ValidateCmd::run(mongo::OperationContext*, mongo::DatabaseName const&, mongo::BSONObj const&, mongo::BSONObjBuilder&)::{lambda()#12})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d37510 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::(anonymous namespace)::handleWaitForUserCacheInvalidation(mongo::OperationContext*, mongo::ReadThroughCache<mongo::UserRequest, mongo::User, mongo::CacheNotCausallyConsistent>::ValueHandle const&)::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::(anonymous namespace)::handleWaitForUserCacheInvalidation(mongo::OperationContext*, mongo::ReadThroughCache<mongo::UserRequest, mongo::User, mongo::CacheNotCausallyConsistent>::ValueHandle const&)::{lambda()#2})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d56570 u mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Notification<bool>::get(mongo::OperationContext*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Notification<bool>::get(mongo::OperationContext*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
000000000446d61e t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Notification<bool>::get(mongo::OperationContext*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Notification<bool>::get(mongo::OperationContext*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::{lambda()#1}::operator()() const [clone .isra.0]
0000000007e83e70 u mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Notification<bool>::waitFor(mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Notification<bool>::waitFor(mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d35e40 u mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Notification<mongo::Status>::get(mongo::OperationContext*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Notification<mongo::Status>::get(mongo::OperationContext*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007df80d0 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::SessionKiller::kill(mongo::OperationContext*, absl::lts_20211102::node_hash_set<mongo::KillAllSessionsByPatternItem, mongo::HashImprover<mongo::KillAllSessionsByPatternItemHash, mongo::KillAllSessionsByPatternItem>, std::equal_to<mongo::KillAllSessionsByPatternItem>, std::allocator<mongo::KillAllSessionsByPatternItem> > const&)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::SessionKiller::kill(mongo::OperationContext*, absl::lts_20211102::node_hash_set<mongo::KillAllSessionsByPatternItem, mongo::HashImprover<mongo::KillAllSessionsByPatternItemHash, mongo::KillAllSessionsByPatternItem>, std::equal_to<mongo::KillAllSessionsByPatternItem>, std::allocator<mongo::KillAllSessionsByPatternItem> > const&)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d7a6c0 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::DDLLockManager::lock(mongo::OperationContext*, mongo::StringData, mongo::StringData, mongo::Duration<std::ratio<1l, 1000l> >, bool)::{lambda()#5}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::DDLLockManager::lock(mongo::OperationContext*, mongo::StringData, mongo::StringData, mongo::Duration<std::ratio<1l, 1000l> >, bool)::{lambda()#5})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d7a6c0 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::DDLLockManager::lock(mongo::OperationContext*, mongo::StringData, mongo::StringData, mongo::Duration<std::ratio<1l, 1000l> >, bool)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::DDLLockManager::lock(mongo::OperationContext*, mongo::StringData, mongo::StringData, mongo::Duration<std::ratio<1l, 1000l> >, bool)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d2c350 u mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000003c4def0 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::{lambda()#1}::operator()() const [clone .isra.0]
000000000473255e t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::{lambda()#1}::operator()() const [clone .isra.0]
00000000047de63a t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::{lambda()#1}::operator()() const [clone .isra.0]
0000000004bf20f6 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::{lambda()#1}::operator()() const [clone .isra.0]
0000000004dc9704 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::{lambda()#1}::operator()() const [clone .isra.0]
0000000007dcf1b0 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::SessionCatalog::_checkOutSessionInner(mongo::OperationContext*, mongo::LogicalSessionId const&, boost::optional<mongo::SessionCatalog::KillToken>)::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::SessionCatalog::_checkOutSessionInner(mongo::OperationContext*, mongo::LogicalSessionId const&, boost::optional<mongo::SessionCatalog::KillToken>)::{lambda()#2})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007db8ff0 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveIndexBuilds::waitUntilAnIndexBuildFinishes(mongo::OperationContext*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveIndexBuilds::waitUntilAnIndexBuildFinishes(mongo::OperationContext*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007db8ff0 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveIndexBuilds::awaitNoIndexBuildInProgressForCollection(mongo::OperationContext*, mongo::UUID const&, mongo::IndexBuildProtocol)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveIndexBuilds::awaitNoIndexBuildInProgressForCollection(mongo::OperationContext*, mongo::UUID const&, mongo::IndexBuildProtocol)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d6b190 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::RangeDeleterService::ReadyRangeDeletionsProcessor::_runRangeDeletions()::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::RangeDeleterService::ReadyRangeDeletionsProcessor::_runRangeDeletions()::{lambda()#2})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007e83de0 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::KeysCollectionManager::PeriodicRunner::_doPeriodicRefresh(mongo::ServiceContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#4}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::KeysCollectionManager::PeriodicRunner::_doPeriodicRefresh(mongo::ServiceContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#4})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d699e0 u mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::MigrationBatchFetcher<mongo::MigrationBatchInserter>::BufferSizeTracker::waitUntilSpaceAvailableAndAdd(mongo::OperationContext*, int)::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::MigrationBatchFetcher<mongo::MigrationBatchInserter>::BufferSizeTracker::waitUntilSpaceAvailableAndAdd(mongo::OperationContext*, int)::{lambda()#2})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d699c0 u mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::MigrationBatchFetcher<mongo::MigrationBatchMockInserter>::BufferSizeTracker::waitUntilSpaceAvailableAndAdd(mongo::OperationContext*, int)::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::MigrationBatchFetcher<mongo::MigrationBatchMockInserter>::BufferSizeTracker::waitUntilSpaceAvailableAndAdd(mongo::OperationContext*, int)::{lambda()#2})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d2ead0 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::WatchdogPeriodicThread::doLoop()::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::WatchdogPeriodicThread::doLoop()::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d85ff0 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::WiredTigerOplogManager::waitForAllEarlierOplogWritesToBeVisible(mongo::WiredTigerRecordStore const*, mongo::OperationContext*)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::WiredTigerOplogManager::waitForAllEarlierOplogWritesToBeVisible(mongo::WiredTigerRecordStore const*, mongo::OperationContext*)::{lambda()#3})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d868c0 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::WiredTigerSessionCache::waitUntilPreparedUnitOfWorkCommitsOrAborts(mongo::OperationContext*, unsigned long)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::WiredTigerSessionCache::waitUntilPreparedUnitOfWorkCommitsOrAborts(mongo::OperationContext*, unsigned long)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007e71670 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::FlowControlTicketholder::getTicket(mongo::OperationContext*, mongo::FlowControlTicketholder::CurOp*)::{lambda()#4}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::FlowControlTicketholder::getTicket(mongo::OperationContext*, mongo::FlowControlTicketholder::CurOp*)::{lambda()#4})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d66c40 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::registerDonateChunk(mongo::OperationContext*, mongo::ShardsvrMoveRange const&)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::registerDonateChunk(mongo::OperationContext*, mongo::ShardsvrMoveRange const&)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d66c40 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::registerReceiveChunk(mongo::OperationContext*, mongo::NamespaceString const&, mongo::ChunkRange const&, mongo::ShardId const&, bool)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::registerReceiveChunk(mongo::OperationContext*, mongo::NamespaceString const&, mongo::ChunkRange const&, mongo::ShardId const&, bool)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d66c40 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::registerSplitOrMergeChunk(mongo::OperationContext*, mongo::NamespaceString const&, mongo::ChunkRange const&)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::registerSplitOrMergeChunk(mongo::OperationContext*, mongo::NamespaceString const&, mongo::ChunkRange const&)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d66c40 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::lock(mongo::OperationContext*, mongo::StringData)::{lambda()#4}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::lock(mongo::OperationContext*, mongo::StringData)::{lambda()#4})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d66c40 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ActiveMigrationsRegistry::lock(mongo::OperationContext*, mongo::StringData)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ActiveMigrationsRegistry::lock(mongo::OperationContext*, mongo::StringData)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d69b50 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::MigrationChunkClonerSource::CloneList::getNextDoc(mongo::OperationContext*, mongo::CollectionPtr const&, int*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::MigrationChunkClonerSource::CloneList::getNextDoc(mongo::OperationContext*, mongo::CollectionPtr const&, int*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d69eb0 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::MigrationDestinationManager::report(mongo::BSONObjBuilder&, mongo::OperationContext*, bool)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::MigrationDestinationManager::report(mongo::BSONObjBuilder&, mongo::OperationContext*, bool)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007e71110 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::CondVarLockGrantNotification::wait(mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::CondVarLockGrantNotification::wait(mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007da8940 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::IndexBuildsCoordinatorMongod::_startIndexBuild(mongo::OperationContext*, mongo::DatabaseName const&, mongo::UUID const&, std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const&, mongo::UUID const&, mongo::IndexBuildProtocol, mongo::IndexBuildsCoordinator::IndexBuildOptions, boost::optional<mongo::ResumeIndexInfo> const&)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::IndexBuildsCoordinatorMongod::_startIndexBuild(mongo::OperationContext*, mongo::DatabaseName const&, mongo::UUID const&, std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const&, mongo::UUID const&, mongo::IndexBuildProtocol, mongo::IndexBuildsCoordinator::IndexBuildOptions, boost::optional<mongo::ResumeIndexInfo> const&)::{lambda()#3})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d74a80 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ShardServerCatalogCacheLoader::waitForDatabaseFlush(mongo::OperationContext*, mongo::StringData)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ShardServerCatalogCacheLoader::waitForDatabaseFlush(mongo::OperationContext*, mongo::StringData)::{lambda()#3})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
000000000446d63a t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ShardServerCatalogCacheLoader::waitForDatabaseFlush(mongo::OperationContext*, mongo::StringData)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ShardServerCatalogCacheLoader::waitForDatabaseFlush(mongo::OperationContext*, mongo::StringData)::{lambda()#3})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::{lambda()#1}::operator()() const [clone .isra.0]
0000000007d74aa0 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ShardServerCatalogCacheLoader::waitForCollectionFlush(mongo::OperationContext*, mongo::NamespaceString const&)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ShardServerCatalogCacheLoader::waitForCollectionFlush(mongo::OperationContext*, mongo::NamespaceString const&)::{lambda()#3})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
000000000446d656 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::ShardServerCatalogCacheLoader::waitForCollectionFlush(mongo::OperationContext*, mongo::NamespaceString const&)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::ShardServerCatalogCacheLoader::waitForCollectionFlush(mongo::OperationContext*, mongo::NamespaceString const&)::{lambda()#3})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::{lambda()#1}::operator()() const [clone .isra.0]
0000000007d76220 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::TransactionCoordinatorCatalog::_waitForStepUpToComplete(std::unique_lock<std::mutex>&, mongo::OperationContext*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::TransactionCoordinatorCatalog::_waitForStepUpToComplete(std::unique_lock<std::mutex>&, mongo::OperationContext*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007db4550 u mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::TrafficRecorder::Recording::TrafficRecordingPacket, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::TrafficRecorder::Recording::CostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::TrafficRecorder::Recording::TrafficRecordingPacket, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::TrafficRecorder::Recording::CostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007db4570 u mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::TrafficRecorder::Recording::TrafficRecordingPacket, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::TrafficRecorder::Recording::CostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::TrafficRecorder::Recording::TrafficRecordingPacket, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::TrafficRecorder::Recording::CostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d381a0 u mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::unique_function<void (mongo::Status)>, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::unique_function<void (mongo::Status)>, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007db4880 u mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::unique_function<void (mongo::Status)>, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::unique_function<void (mongo::Status)>, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007dcf8b0 u mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::AsyncRequestsSender::Response, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::AsyncRequestsSender::Response, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007dcf8d0 u mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::AsyncRequestsSender::Response, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::AsyncRequestsSender::Response, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d84c50 u mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::repl::TenantFileImporterService::ImporterEvent, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::repl::TenantFileImporterService::ImporterEvent, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d69f20 u mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::BSONObj, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::BSONObj, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForSpace(std::unique_lock<std::mutex>&, unsigned long, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d69f40 u mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::BSONObj, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::BSONObj, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::_waitForNonEmpty(std::unique_lock<std::mutex>&, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d9a520 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::OplogFetcher::_runQuery(mongo::executor::TaskExecutor::CallbackArgs const&)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::OplogFetcher::_runQuery(mongo::executor::TaskExecutor::CallbackArgs const&)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d9a620 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::OplogBufferCollection::waitForDataFor(mongo::Duration<std::ratio<1l, 1000l> >, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::OplogBufferCollection::waitForDataFor(mongo::Duration<std::ratio<1l, 1000l> >, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d9a620 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::OplogBufferCollection::waitForDataUntil(mongo::Date_t, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::OplogBufferCollection::waitForDataUntil(mongo::Date_t, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d83d10 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::OplogBufferBlockingQueue::waitForDataFor(mongo::Duration<std::ratio<1l, 1000l> >, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::OplogBufferBlockingQueue::waitForDataFor(mongo::Duration<std::ratio<1l, 1000l> >, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d83d10 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::OplogBufferBlockingQueue::waitForDataUntil(mongo::Date_t, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::OplogBufferBlockingQueue::waitForDataUntil(mongo::Date_t, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d34e30 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::ReplicationCoordinatorImpl::waitForMemberState(mongo::Interruptible*, mongo::repl::MemberState, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::ReplicationCoordinatorImpl::waitForMemberState(mongo::Interruptible*, mongo::repl::MemberState, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000003c4ded4 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::ReplicationCoordinatorImpl::waitForMemberState(mongo::Interruptible*, mongo::repl::MemberState, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::ReplicationCoordinatorImpl::waitForMemberState(mongo::Interruptible*, mongo::repl::MemberState, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::{lambda()#1}::operator()() const [clone .isra.0]
0000000007d34e30 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::ReplicationCoordinatorImpl::waitUntilMajorityOpTime(mongo::OperationContext*, mongo::repl::OpTime, boost::optional<mongo::Date_t>)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::ReplicationCoordinatorImpl::waitUntilMajorityOpTime(mongo::OperationContext*, mongo::repl::OpTime, boost::optional<mongo::Date_t>)::{lambda()#3})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000003c4df28 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::ReplicationCoordinatorImpl::waitUntilMajorityOpTime(mongo::OperationContext*, mongo::repl::OpTime, boost::optional<mongo::Date_t>)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::ReplicationCoordinatorImpl::waitUntilMajorityOpTime(mongo::OperationContext*, mongo::repl::OpTime, boost::optional<mongo::Date_t>)::{lambda()#3})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::{lambda()#1}::operator()() const [clone .isra.0]
0000000007d34e30 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::ReplicationCoordinatorImpl::waitUntilSnapshotCommitted(mongo::OperationContext*, mongo::Timestamp const&)::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::ReplicationCoordinatorImpl::waitUntilSnapshotCommitted(mongo::OperationContext*, mongo::Timestamp const&)::{lambda()#2})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000003c4deb8 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::ReplicationCoordinatorImpl::waitUntilSnapshotCommitted(mongo::OperationContext*, mongo::Timestamp const&)::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::ReplicationCoordinatorImpl::waitUntilSnapshotCommitted(mongo::OperationContext*, mongo::Timestamp const&)::{lambda()#2})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::{lambda()#1}::operator()() const [clone .isra.0]
0000000007e1a6f0 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::mozjs::MozJSProxyScope::runOnImplThread(mongo::unique_function<void ()>)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::mozjs::MozJSProxyScope::runOnImplThread(mongo::unique_function<void ()>)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007dcfd10 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Fetcher::join(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Fetcher::join(mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d79200 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::Balancer::joinCurrentRound(mongo::OperationContext*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::Balancer::joinCurrentRound(mongo::OperationContext*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007dceb20 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::executor::AsyncMulticaster::multicast(std::vector<mongo::HostAndPort, std::allocator<mongo::HostAndPort> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::executor::AsyncMulticaster::multicast(std::vector<mongo::HostAndPort, std::allocator<mongo::HostAndPort> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#3})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007dceb20 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::executor::AsyncMulticaster::multicast(std::vector<mongo::HostAndPort, std::allocator<mongo::HostAndPort> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::executor::AsyncMulticaster::multicast(std::vector<mongo::HostAndPort, std::allocator<mongo::HostAndPort> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::OperationContext*, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007e688a0 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::executor::ThreadPoolTaskExecutor::waitForEvent(mongo::OperationContext*, mongo::executor::TaskExecutor::EventHandle const&, mongo::Date_t)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::executor::ThreadPoolTaskExecutor::waitForEvent(mongo::OperationContext*, mongo::executor::TaskExecutor::EventHandle const&, mongo::Date_t)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007e688a0 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::executor::ThreadPoolTaskExecutor::wait(mongo::executor::TaskExecutor::CallbackHandle const&, mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::executor::ThreadPoolTaskExecutor::wait(mongo::executor::TaskExecutor::CallbackHandle const&, mongo::Interruptible*)::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000007d82730 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::ShardMergeRecipientService::Instance::waitUntilMigrationReachesReturnAfterReachingTimestamp(mongo::OperationContext*, mongo::Timestamp const&)::{lambda()#1}::operator()() const::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::ShardMergeRecipientService::Instance::waitUntilMigrationReachesReturnAfterReachingTimestamp(mongo::OperationContext*, mongo::Timestamp const&)::{lambda()#1}::operator()() const::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
00000000047de61e t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::ShardMergeRecipientService::Instance::waitUntilMigrationReachesReturnAfterReachingTimestamp(mongo::OperationContext*, mongo::Timestamp const&)::{lambda()#1}::operator()() const::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::ShardMergeRecipientService::Instance::waitUntilMigrationReachesReturnAfterReachingTimestamp(mongo::OperationContext*, mongo::Timestamp const&)::{lambda()#1}::operator()() const::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::{lambda()#1}::operator()() const [clone .isra.0]
0000000007d7d970 d mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::TenantMigrationRecipientService::Instance::waitUntilMigrationReachesReturnAfterReachingTimestamp(mongo::OperationContext*, mongo::Timestamp const&)::{lambda()#1}::operator()() const::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::TenantMigrationRecipientService::Instance::waitUntilMigrationReachesReturnAfterReachingTimestamp(mongo::OperationContext*, mongo::Timestamp const&)::{lambda()#1}::operator()() const::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::_failedAssertionSourceLocation
0000000004732542 t mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<std::mutex>, mongo::repl::TenantMigrationRecipientService::Instance::waitUntilMigrationReachesReturnAfterReachingTimestamp(mongo::OperationContext*, mongo::Timestamp const&)::{lambda()#1}::operator()() const::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<std::mutex>&, mongo::Date_t, mongo::repl::TenantMigrationRecipientService::Instance::waitUntilMigrationReachesReturnAfterReachingTimestamp(mongo::OperationContext*, mongo::Timestamp const&)::{lambda()#1}::operator()() const::{lambda()#1})::{lambda(mongo::Status, mongo::Interruptible::WakeSpeed)#1}::operator()(mongo::Status, mongo::Interruptible::WakeSpeed) const::{lambda()#1}::operator()() const [clone .isra.0]
0000000004fb5d14 W mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::TrafficRecorder::Recording::TrafficRecordingPacket, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::TrafficRecorder::Recording::CostFunction>::push(mongo::TrafficRecorder::Recording::TrafficRecordingPacket&&, mongo::Interruptible*)::{lambda(std::unique_lock<std::mutex>&)#1}::operator()(std::unique_lock<std::mutex>&) const::{lambda()#1}::operator()() const
0000000003d3527a W mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::unique_function<void (mongo::Status)>, (mongo::producer_consumer_queue_detail::ProducerKind)1, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::push(mongo::unique_function<void (mongo::Status)>&&, mongo::Interruptible*)::{lambda(std::unique_lock<std::mutex>&)#1}::operator()(std::unique_lock<std::mutex>&) const::{lambda()#1}::operator()() const
00000000057e21e0 W mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::AsyncRequestsSender::Response, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::push(mongo::AsyncRequestsSender::Response&&, mongo::Interruptible*)::{lambda(std::unique_lock<std::mutex>&)#1}::operator()(std::unique_lock<std::mutex>&) const::{lambda()#1}::operator()() const
000000000424da1c W mongo::producer_consumer_queue_detail::ProducerConsumerQueue<mongo::BSONObj, (mongo::producer_consumer_queue_detail::ProducerKind)0, (mongo::producer_consumer_queue_detail::ConsumerKind)0, mongo::producer_consumer_queue_detail::DefaultCostFunction>::push(mongo::BSONObj&&, mongo::Interruptible*)::{lambda(std::unique_lock<std::mutex>&)#1}::operator()(std::unique_lock<std::mutex>&) const::{lambda()#1}::operator()() const
